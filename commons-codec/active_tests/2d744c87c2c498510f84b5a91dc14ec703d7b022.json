{
    "org.apache.commons.codec.CharEncodingTest": [
        "testUtf16",
        "testUtf8",
        "testUsAscii",
        "testUtf16Be",
        "testUtf16Le",
        "testIso8859_1",
        "testConstructor"
    ],
    "org.apache.commons.codec.CharsetsTest": [
        "testUtf16",
        "testUtf8",
        "testUsAscii",
        "testUtf16Be",
        "testUtf16Le",
        "testToCharset",
        "testIso8859_1"
    ],
    "org.apache.commons.codec.DecoderExceptionTest": [
        "testConstructor0",
        "testConstructorThrowable",
        "testConstructorStringThrowable",
        "testConstructorString"
    ],
    "org.apache.commons.codec.EncoderExceptionTest": [
        "testConstructor0",
        "testConstructorThrowable",
        "testConstructorStringThrowable",
        "testConstructorString"
    ],
    "org.apache.commons.codec.StringEncoderComparatorTest": [
        "testComparatorWithDoubleMetaphone",
        "testComparatorWithDoubleMetaphoneAndInvalidInput",
        "testComparatorWithSoundex"
    ],
    "org.apache.commons.codec.binary.AllocateDirectHexTest": [
        "testEncodeHexByteString_ByteBufferBoolean_ToUpperCase",
        "testDecodeHexStringOddCharacters1",
        "testEncodeDecodeHexCharArrayRandom",
        "testDecodeByteBufferObjectEmpty",
        "testEncodeHexByteArrayHelloWorldLowerCaseHex",
        "testDecodeByteArrayOddCharacters",
        "testDecodeHexCharArrayOddCharacters1",
        "testDecodeHexCharArrayOddCharacters3",
        "testDecodeHexCharArrayOddCharacters5",
        "testDecodeByteBufferOddCharacters",
        "testEncodeHexByteBufferHelloWorldLowerCaseHex",
        "testEncodeHexByteArrayHelloWorldUpperCaseHex",
        "testDecodeByteBufferEmpty",
        "testCustomCharset",
        "testEncodeHexByteArrayZeroes",
        "testEncodeClassCastException",
        "testEncodeByteBufferObjectEmpty",
        "testDecodeHexStringOddCharacters",
        "testDecodeStringEmpty",
        "testEncodeHexByteString_ByteArrayBoolean_ToLowerCase",
        "testEncodeHexByteBufferHelloWorldUpperCaseHex",
        "testCustomCharsetBadName",
        "testEncodeByteBufferEmpty",
        "testEncodeByteArrayObjectEmpty",
        "testDecodeBadCharacterPos0",
        "testDecodeBadCharacterPos1",
        "testDecodeHexStringEmpty",
        "testEncodeHexByteString_ByteArrayBoolean_ToUpperCase",
        "testEncodeHexByteString_ByteArrayOfZeroes",
        "testEncodeStringEmpty",
        "testDecodeByteArrayEmpty",
        "testEncodeHex_ByteBufferOfZeroes",
        "testGetCharset",
        "testGetCharsetName",
        "testDecodeClassCastException",
        "testEncodeHexByteString_ByteBufferOfZeroes",
        "testEncodeHexByteString_ByteBufferBoolean_ToLowerCase",
        "testDecodeByteArrayObjectEmpty",
        "testEncodeByteArrayEmpty",
        "testRequiredCharset",
        "testCustomCharsetToString",
        "testEncodeHexByteBufferEmpty",
        "testEncodeHexByteArrayEmpty",
        "testDecodeHexCharArrayEmpty"
    ],
    "org.apache.commons.codec.binary.Base32InputStreamTest": [
        "testBase32InputStreamByteByByte",
        "testSkipToEnd",
        "testSkipNone",
        "testRead0",
        "testBase32EmptyInputStreamPemChuckSize",
        "testMarkSupported",
        "testReadOutOfBounds",
        "testReadNull",
        "testCodec105",
        "testCodec130",
        "testSkipWrongArgument",
        "testAvailable",
        "testBase32EmptyInputStreamMimeChuckSize",
        "testSkipPastEnd",
        "testSkipBig",
        "testBase32InputStreamByChunk"
    ],
    "org.apache.commons.codec.binary.Base32OutputStreamTest": [
        "testWriteOutOfBounds",
        "testBase32EmptyOutputStreamPemChunkSize",
        "testWriteToNullCoverage",
        "testBase32EmptyOutputStreamMimeChunkSize",
        "testBase32OutputStreamByChunk",
        "testBase32OutputStreamByteByByte"
    ],
    "org.apache.commons.codec.binary.Base32Test": [
        "testBase32HexSamplesReverseLowercase",
        "testBase32Samples",
        "testBase32SamplesNonDefaultPadding",
        "testBase32ImpossibleSamples",
        "testRandomBytes",
        "testRandomBytesHex",
        "testSingleCharEncoding",
        "testBase32BinarySamplesReverse",
        "testCodec200",
        "testRandomBytesChunked",
        "testBase32HexSamples",
        "testBase64AtBufferStart",
        "testBase64AtBufferMiddle",
        "testBase64AtBufferEnd",
        "testBase32BinarySamples",
        "testBase32Chunked",
        "testBase32HexImpossibleSamples",
        "testBase32ImpossibleChunked",
        "testBase32HexSamplesReverse"
    ],
    "org.apache.commons.codec.binary.Base64Codec13Test": [
        "testEncoder",
        "testBinaryEncoder",
        "testStaticEncodeChunked",
        "testDecoder",
        "testBinaryDecoder",
        "testStaticDecodeChunked",
        "testStaticDecode",
        "testStaticEncode"
    ],
    "org.apache.commons.codec.binary.Base64InputStreamTest": [
        "testSkipToEnd",
        "testSkipNone",
        "testCodec98NPE",
        "testRead0",
        "testBase64InputStreamByChunk",
        "testMarkSupported",
        "testInputStreamReader",
        "testReadOutOfBounds",
        "testReadNull",
        "testCodec101",
        "testCodec105",
        "testCodec130",
        "testSkipWrongArgument",
        "testAvailable",
        "testBase64EmptyInputStreamPemChuckSize",
        "testBase64EmptyInputStreamMimeChuckSize",
        "testSkipPastEnd",
        "testSkipBig",
        "testBase64InputStreamByteByByte"
    ],
    "org.apache.commons.codec.binary.Base64OutputStreamTest": [
        "testCodec98NPE",
        "testWriteOutOfBounds",
        "testBase64OutputStreamByteByByte",
        "testWriteToNullCoverage",
        "testBase64EmptyOutputStreamMimeChunkSize",
        "testBase64EmptyOutputStreamPemChunkSize",
        "testBase64OutputStreamByChunk"
    ],
    "org.apache.commons.codec.binary.Base64Test": [
        "testTriplets",
        "testCodeIntegerEdgeCases",
        "testBase64ImpossibleSamples",
        "testStringToByteVariations",
        "testConstructor_Int_ByteArray_Boolean_UrlSafe",
        "testSingletonsChunked",
        "testKnownDecodings",
        "testPairs",
        "testUUID",
        "testEncodeDecodeSmall",
        "testConstructors",
        "testHugeLineSeparator",
        "testObjectDecodeWithValidParameter",
        "testCodeInteger1",
        "testCodeInteger2",
        "testCodeInteger3",
        "testCodeInteger4",
        "testObjectEncode",
        "testRfc2045Section6Dot8ChunkSizeDefinition",
        "testUrlSafe",
        "testObjectEncodeWithInvalidParameter",
        "testEncodeDecodeRandom",
        "testRfc2045Section2Dot1CrLfDefinition",
        "testDecodeWithWhitespace",
        "testDecodePadOnlyChunked",
        "testKnownEncodings",
        "testIgnoringNonBase64InDecode",
        "testCodec112",
        "testDecodePadMarkerIndex2",
        "testDecodePadMarkerIndex3",
        "testIsUrlSafe",
        "testEncodeOverMaxSize",
        "testEmptyBase64",
        "testSingletons",
        "testTripletsChunked",
        "testBase64AtBufferStart",
        "testCodec68",
        "testBase64AtBufferMiddle",
        "testBase64AtBufferEnd",
        "testRfc4648Section10DecodeEncode",
        "testObjectDecodeWithInvalidParameter",
        "testIsArrayByteBase64",
        "testDecodePadOnly",
        "testChunkedEncodeMultipleOf76",
        "testBase64",
        "testRfc1421Section6Dot8ChunkSizeDefinition",
        "testNonBase64Test",
        "testConstructor_Int_ByteArray_Boolean",
        "testByteToStringVariations",
        "testObjectEncodeWithValidParameter",
        "testRfc4648Section10DecodeWithCrLf",
        "testRfc4648Section10Decode",
        "testRfc4648Section10Encode",
        "testCodeIntegerNull",
        "testIsStringBase64",
        "testRfc4648Section10EncodeDecode",
        "testDecodeWithInnerPad"
    ],
    "org.apache.commons.codec.binary.BaseNCodecTest": [
        "testBaseNCodec",
        "testProvidePaddingByte",
        "testIsInAlphabetByte",
        "testContainsAlphabetOrPad",
        "testIsWhiteSpace",
        "testIsInAlphabetString",
        "testIsInAlphabetByteArrayBoolean"
    ],
    "org.apache.commons.codec.binary.BinaryCodecTest": [
        "testToAsciiBytes",
        "testToAsciiChars",
        "testToByteArrayFromString",
        "testEncodeByteArray",
        "testEncodeObjectNull",
        "testToAsciiString",
        "testFromAsciiByteArray",
        "testDecodeObjectException",
        "testDecodeObject",
        "testEncodeObjectException",
        "testEncodeObject",
        "testDecodeByteArray",
        "testFromAsciiCharArray"
    ],
    "org.apache.commons.codec.binary.HexTest": [
        "testEncodeHexByteString_ByteBufferBoolean_ToUpperCase",
        "testDecodeHexStringOddCharacters1",
        "testEncodeDecodeHexCharArrayRandom",
        "testDecodeByteBufferObjectEmpty",
        "testEncodeHexByteArrayHelloWorldLowerCaseHex",
        "testDecodeByteArrayOddCharacters",
        "testDecodeHexCharArrayOddCharacters1",
        "testDecodeHexCharArrayOddCharacters3",
        "testDecodeHexCharArrayOddCharacters5",
        "testDecodeByteBufferOddCharacters",
        "testEncodeHexByteBufferHelloWorldLowerCaseHex",
        "testEncodeHexByteArrayHelloWorldUpperCaseHex",
        "testDecodeByteBufferEmpty",
        "testCustomCharset",
        "testEncodeHexByteArrayZeroes",
        "testEncodeClassCastException",
        "testEncodeByteBufferObjectEmpty",
        "testDecodeHexStringOddCharacters",
        "testDecodeStringEmpty",
        "testEncodeHexByteString_ByteArrayBoolean_ToLowerCase",
        "testEncodeHexByteBufferHelloWorldUpperCaseHex",
        "testCustomCharsetBadName",
        "testEncodeByteBufferEmpty",
        "testEncodeByteArrayObjectEmpty",
        "testDecodeBadCharacterPos0",
        "testDecodeBadCharacterPos1",
        "testDecodeHexStringEmpty",
        "testEncodeHexByteString_ByteArrayBoolean_ToUpperCase",
        "testEncodeHexByteString_ByteArrayOfZeroes",
        "testEncodeStringEmpty",
        "testDecodeByteArrayEmpty",
        "testEncodeHex_ByteBufferOfZeroes",
        "testGetCharset",
        "testGetCharsetName",
        "testDecodeClassCastException",
        "testEncodeHexByteString_ByteBufferOfZeroes",
        "testEncodeHexByteString_ByteBufferBoolean_ToLowerCase",
        "testDecodeByteArrayObjectEmpty",
        "testEncodeByteArrayEmpty",
        "testRequiredCharset",
        "testCustomCharsetToString",
        "testEncodeHexByteBufferEmpty",
        "testEncodeHexByteArrayEmpty",
        "testDecodeHexCharArrayEmpty"
    ],
    "org.apache.commons.codec.binary.StringUtilsTest": [
        "testNewStringNullInput",
        "testNewStringNullInput_CODEC229",
        "testGetBytesUtf16",
        "testGetBytesUtf8",
        "testGetBytesIso8859_1",
        "testGetBytesUsAscii",
        "testGetBytesUtf16Be",
        "testGetBytesUtf16Le",
        "testGetBytesUncheckedNullInput",
        "testEqualsString",
        "testNewStringIso8859_1",
        "testGetBytesUncheckedBadName",
        "testNewStringUtf8",
        "testNewStringUsAscii",
        "testNewStringUtf16Be",
        "testNewStringUtf16Le",
        "testEqualsCS1",
        "testEqualsCS2",
        "testNewStringUtf16",
        "testConstructor",
        "testNewStringBadEnc"
    ],
    "org.apache.commons.codec.digest.Apr1CryptTest": [
        "testApr1CryptBytes",
        "testApr1CryptWithEmptySalt",
        "testApr1CryptNullData",
        "testApr1CryptWithoutSalt",
        "testApr1LongSalt",
        "testApr1CryptBytesWithThreadLocalRandom",
        "testApr1CryptExplicitCall",
        "testApr1CryptWithInvalidSalt",
        "testApr1CryptStrings"
    ],
    "org.apache.commons.codec.digest.B64Test": [
        "testB64T",
        "testB64from24bit"
    ],
    "org.apache.commons.codec.digest.CryptTest": [
        "testDefaultCryptVariant",
        "testCrypt",
        "testCryptWithEmptySalt",
        "testCryptWithBytes"
    ],
    "org.apache.commons.codec.digest.DigestUtilsTest": [
        "testMd5HexLengthForBytes",
        "testSha1UpdateWithByteBuffer",
        "testSha256HexInputStream",
        "testSha512HexInputStream",
        "testMd2Length",
        "testInternalNoSuchAlgorithmException",
        "testSha3_224HexInputStream",
        "testMd5LengthForBytes",
        "testSha384HexInputStream",
        "testSha3_224",
        "testSha3_256",
        "testSha3_384",
        "testSha3_512",
        "testSha1UpdateWithByteArray",
        "testSha1UpdateWithString",
        "testSha3_256HexInputStream",
        "testSha3_512HexInputStream",
        "testShaUpdateWithByteArray",
        "testMd2Hex",
        "testMd5Hex",
        "testSha1Hex",
        "testMd2HexLength",
        "testSha224",
        "testSha256",
        "testSha384",
        "testSha512",
        "testShaHex",
        "testShaUpdateWithString",
        "testSha3_384HexInputStream"
    ],
    "org.apache.commons.codec.digest.HmacAlgorithmsTest": [
        "testMacInputStream[HmacMD5]",
        "testMacHexInputStream[HmacMD5]",
        "testMacString[HmacMD5]",
        "testHmacHexFailInputStream[HmacMD5]",
        "testHmacFailByteArray[HmacMD5]",
        "testHmacFailString[HmacMD5]",
        "testHmacHexFailByteArray[HmacMD5]",
        "testGetHmacEmptyKey[HmacMD5]",
        "testHmacHexFailString[HmacMD5]",
        "testHmacFailInputStream[HmacMD5]",
        "testInitializedMac[HmacMD5]",
        "testAlgorithm[HmacMD5]",
        "testGetHmacNullKey[HmacMD5]",
        "testMacByteArary[HmacMD5]",
        "testMacHexByteArray[HmacMD5]",
        "testMacHexString[HmacMD5]",
        "testMacInputStream[HmacSHA1]",
        "testMacHexInputStream[HmacSHA1]",
        "testMacString[HmacSHA1]",
        "testHmacHexFailInputStream[HmacSHA1]",
        "testHmacFailByteArray[HmacSHA1]",
        "testHmacFailString[HmacSHA1]",
        "testHmacHexFailByteArray[HmacSHA1]",
        "testGetHmacEmptyKey[HmacSHA1]",
        "testHmacHexFailString[HmacSHA1]",
        "testHmacFailInputStream[HmacSHA1]",
        "testInitializedMac[HmacSHA1]",
        "testAlgorithm[HmacSHA1]",
        "testGetHmacNullKey[HmacSHA1]",
        "testMacByteArary[HmacSHA1]",
        "testMacHexByteArray[HmacSHA1]",
        "testMacHexString[HmacSHA1]",
        "testMacInputStream[HmacSHA256]",
        "testMacHexInputStream[HmacSHA256]",
        "testMacString[HmacSHA256]",
        "testHmacHexFailInputStream[HmacSHA256]",
        "testHmacFailByteArray[HmacSHA256]",
        "testHmacFailString[HmacSHA256]",
        "testHmacHexFailByteArray[HmacSHA256]",
        "testGetHmacEmptyKey[HmacSHA256]",
        "testHmacHexFailString[HmacSHA256]",
        "testHmacFailInputStream[HmacSHA256]",
        "testInitializedMac[HmacSHA256]",
        "testAlgorithm[HmacSHA256]",
        "testGetHmacNullKey[HmacSHA256]",
        "testMacByteArary[HmacSHA256]",
        "testMacHexByteArray[HmacSHA256]",
        "testMacHexString[HmacSHA256]",
        "testMacInputStream[HmacSHA384]",
        "testMacHexInputStream[HmacSHA384]",
        "testMacString[HmacSHA384]",
        "testHmacHexFailInputStream[HmacSHA384]",
        "testHmacFailByteArray[HmacSHA384]",
        "testHmacFailString[HmacSHA384]",
        "testHmacHexFailByteArray[HmacSHA384]",
        "testGetHmacEmptyKey[HmacSHA384]",
        "testHmacHexFailString[HmacSHA384]",
        "testHmacFailInputStream[HmacSHA384]",
        "testInitializedMac[HmacSHA384]",
        "testAlgorithm[HmacSHA384]",
        "testGetHmacNullKey[HmacSHA384]",
        "testMacByteArary[HmacSHA384]",
        "testMacHexByteArray[HmacSHA384]",
        "testMacHexString[HmacSHA384]",
        "testMacInputStream[HmacSHA512]",
        "testMacHexInputStream[HmacSHA512]",
        "testMacString[HmacSHA512]",
        "testHmacHexFailInputStream[HmacSHA512]",
        "testHmacFailByteArray[HmacSHA512]",
        "testHmacFailString[HmacSHA512]",
        "testHmacHexFailByteArray[HmacSHA512]",
        "testGetHmacEmptyKey[HmacSHA512]",
        "testHmacHexFailString[HmacSHA512]",
        "testHmacFailInputStream[HmacSHA512]",
        "testInitializedMac[HmacSHA512]",
        "testAlgorithm[HmacSHA512]",
        "testGetHmacNullKey[HmacSHA512]",
        "testMacByteArary[HmacSHA512]",
        "testMacHexByteArray[HmacSHA512]",
        "testMacHexString[HmacSHA512]",
        "testMacInputStream[HmacSHA224]",
        "testMacHexInputStream[HmacSHA224]",
        "testMacString[HmacSHA224]",
        "testHmacHexFailInputStream[HmacSHA224]",
        "testHmacFailByteArray[HmacSHA224]",
        "testHmacFailString[HmacSHA224]",
        "testHmacHexFailByteArray[HmacSHA224]",
        "testGetHmacEmptyKey[HmacSHA224]",
        "testHmacHexFailString[HmacSHA224]",
        "testHmacFailInputStream[HmacSHA224]",
        "testInitializedMac[HmacSHA224]",
        "testAlgorithm[HmacSHA224]",
        "testGetHmacNullKey[HmacSHA224]",
        "testMacByteArary[HmacSHA224]",
        "testMacHexByteArray[HmacSHA224]",
        "testMacHexString[HmacSHA224]"
    ],
    "org.apache.commons.codec.digest.HmacUtilsTest": [
        "testHmacMd5Hex",
        "testHmacSha1Hex",
        "testSecretKeySpecAllowsEmtyKeys",
        "testHmacSha1UpdateWithByteArray",
        "testSha256HMacFail",
        "testInternalNoSuchAlgorithmException",
        "testSha256HMac",
        "testInitializedMacNullKey",
        "testGetHMac",
        "testSha1HMacFail",
        "testSha1HMac",
        "testInitializedMacNullAlgo",
        "testSha384HMacFail",
        "testSha384HMac",
        "testMd5HMac",
        "testMd5HMacFail",
        "testInitializedMac",
        "testSha512HMacFail",
        "testHmacSha1UpdateWithString",
        "testHmacSha1UpdateWithInpustream",
        "testNullKey",
        "testEmptyKey",
        "testSha512HMac"
    ],
    "org.apache.commons.codec.digest.Md5CryptTest": [
        "testMd5CryptExplicitCallWithThreadLocalRandom",
        "testMd5CryptNullData",
        "testCtor",
        "testMd5CryptBytes",
        "testMd5CryptLongInput",
        "testMd5CryptWithEmptySalt",
        "testMd5CryptExplicitCall",
        "testMd5CryptStrings"
    ],
    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest": [
        "testDigestFile[MD2]",
        "testDigestInputStream[MD2]",
        "testGetMessageDigest[MD2]",
        "testDigestByteBuffer[MD2]",
        "testAlgorithm[MD2]",
        "testDigestByteArray[MD2]",
        "testDigestFile[MD5]",
        "testDigestInputStream[MD5]",
        "testGetMessageDigest[MD5]",
        "testDigestByteBuffer[MD5]",
        "testAlgorithm[MD5]",
        "testDigestByteArray[MD5]",
        "testDigestFile[SHA-1]",
        "testDigestInputStream[SHA-1]",
        "testGetMessageDigest[SHA-1]",
        "testDigestByteBuffer[SHA-1]",
        "testAlgorithm[SHA-1]",
        "testDigestByteArray[SHA-1]",
        "testDigestFile[SHA-224]",
        "testDigestInputStream[SHA-224]",
        "testGetMessageDigest[SHA-224]",
        "testDigestByteBuffer[SHA-224]",
        "testAlgorithm[SHA-224]",
        "testDigestByteArray[SHA-224]",
        "testDigestFile[SHA-256]",
        "testDigestInputStream[SHA-256]",
        "testGetMessageDigest[SHA-256]",
        "testDigestByteBuffer[SHA-256]",
        "testAlgorithm[SHA-256]",
        "testDigestByteArray[SHA-256]",
        "testDigestFile[SHA-384]",
        "testDigestInputStream[SHA-384]",
        "testGetMessageDigest[SHA-384]",
        "testDigestByteBuffer[SHA-384]",
        "testAlgorithm[SHA-384]",
        "testDigestByteArray[SHA-384]",
        "testDigestFile[SHA-512]",
        "testDigestInputStream[SHA-512]",
        "testGetMessageDigest[SHA-512]",
        "testDigestByteBuffer[SHA-512]",
        "testAlgorithm[SHA-512]",
        "testDigestByteArray[SHA-512]",
        "testDigestFile[SHA3-224]",
        "testDigestInputStream[SHA3-224]",
        "testGetMessageDigest[SHA3-224]",
        "testDigestByteBuffer[SHA3-224]",
        "testAlgorithm[SHA3-224]",
        "testDigestByteArray[SHA3-224]",
        "testDigestFile[SHA3-256]",
        "testDigestInputStream[SHA3-256]",
        "testGetMessageDigest[SHA3-256]",
        "testDigestByteBuffer[SHA3-256]",
        "testAlgorithm[SHA3-256]",
        "testDigestByteArray[SHA3-256]",
        "testDigestFile[SHA3-384]",
        "testDigestInputStream[SHA3-384]",
        "testGetMessageDigest[SHA3-384]",
        "testDigestByteBuffer[SHA3-384]",
        "testAlgorithm[SHA3-384]",
        "testDigestByteArray[SHA3-384]",
        "testDigestFile[SHA3-512]",
        "testDigestInputStream[SHA3-512]",
        "testGetMessageDigest[SHA3-512]",
        "testDigestByteBuffer[SHA3-512]",
        "testAlgorithm[SHA3-512]",
        "testDigestByteArray[SHA3-512]"
    ],
    "org.apache.commons.codec.digest.MurmurHash2Test": [
        "testHash64ByteArrayIntInt",
        "testHash32ByteArrayInt",
        "testHash32ByteArrayIntInt",
        "testHash64StringIntInt",
        "testHash64String",
        "testHash64ByteArrayInt",
        "testHash32String",
        "testHash32StringIntInt"
    ],
    "org.apache.commons.codec.digest.MurmurHash3Test": [
        "testHash128WithOffsetLengthAndSeed",
        "testHash32Long",
        "testHash32LongLong",
        "testHash32LongSeed",
        "testHash32With1TrailingSignedByteIsInvalid",
        "testHash128",
        "testHash128String",
        "testIncrementalHash32",
        "testHash64InNotEqualToHash128",
        "testHash32WithOffsetLengthAndSeed",
        "testHash32WithLengthAndSeed",
        "testHash32",
        "testHash64",
        "testHash32WithLength",
        "testHash32String",
        "testHash64WithPrimitives",
        "testHash32LongLongSeed",
        "testHash64WithOffsetAndLength"
    ],
    "org.apache.commons.codec.digest.PureJavaCrc32CTest": [
        "testZeros",
        "testOnes",
        "testIncreasing",
        "testDecreasing"
    ],
    "org.apache.commons.codec.digest.PureJavaCrc32Test": [
        "testCorrectness"
    ],
    "org.apache.commons.codec.digest.Sha256CryptTest": [
        "testSha256CryptNullData",
        "testSha256CryptBytes",
        "testSha256CryptWithEmptySalt",
        "testSha2CryptRounds",
        "testSha256LargetThanBlocksize",
        "testSha256CryptExplicitCall",
        "testSha256CryptStrings",
        "testSha2CryptRoundsThreadLocalRandom"
    ],
    "org.apache.commons.codec.digest.Sha2CryptTest": [
        "testCtor"
    ],
    "org.apache.commons.codec.digest.Sha512CryptTest": [
        "testSha2CryptRounds",
        "testSha2CryptWrongSalt",
        "testSha256LargetThanBlocksize",
        "testSha512CryptExplicitCallThreadLocalRandom",
        "testSha512CryptWithEmptySalt",
        "testSha512CryptBytes",
        "testSha512CryptStrings",
        "testSha512CryptNullData",
        "testSha512CryptExplicitCall"
    ],
    "org.apache.commons.codec.digest.UnixCryptTest": [
        "testUnicCryptInvalidSalt",
        "testUnixCryptStrings",
        "testCtor",
        "testUnixCryptExplicitCall",
        "testUnixCryptNullData",
        "testUnixCryptWithoutSalt",
        "testUnixCryptWithEmptySalt",
        "testUnixCryptWithHalfSalt",
        "testUnixCryptBytes"
    ],
    "org.apache.commons.codec.digest.XXHash32Test": [
        "verifyChecksum[0]",
        "verifyChecksum[1]"
    ],
    "org.apache.commons.codec.language.Caverphone1Test": [
        "testEndMb",
        "testIsCaverphoneEquals",
        "testWikipediaExamples",
        "testSpecificationV1Examples",
        "testCaverphoneRevisitedCommonCodeAT1111",
        "testEncodeWithInvalidObject",
        "testEncodeNull",
        "testEncodeEmpty",
        "testLocaleIndependence"
    ],
    "org.apache.commons.codec.language.Caverphone2Test": [
        "testCaverphoneRevisitedRandomNameTTA1111111",
        "testCaverphoneRevisitedRandomNameTN11111111",
        "testCaverphoneRevisitedRandomNameKLN1111111",
        "testEndMb",
        "testIsCaverphoneEquals",
        "testCaverphoneRevisitedCommonCodeAT11111111",
        "testCaverphoneRevisitedExamples",
        "testCaverphoneRevisitedRandomWords",
        "testSpecificationExamples",
        "testEncodeWithInvalidObject",
        "testEncodeNull",
        "testEncodeEmpty",
        "testLocaleIndependence"
    ],
    "org.apache.commons.codec.language.ColognePhoneticTest": [
        "testExamples",
        "testVariationsMella",
        "testVariationsMeyer",
        "testCanFail",
        "testAychlmajrForCodec122",
        "testEdgeCases",
        "testIsEncodeEquals",
        "testAabjoe",
        "testAaclan",
        "testHyphen",
        "testSpecialCharsBetweenSameLetters",
        "testEncodeWithInvalidObject",
        "testEncodeNull",
        "testEncodeEmpty",
        "testLocaleIndependence"
    ],
    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest": [
        "testSoundexBasic",
        "testAdjacentCodes",
        "testSpecialRomanianCharacters",
        "testSoundexBasic2",
        "testSoundexBasic3",
        "testEncodeIgnoreHyphens",
        "testEncodeIgnoreTrimmable",
        "testEncodeIgnoreApostrophes",
        "testAccentedCharacterFolding",
        "testEncodeWithInvalidObject",
        "testEncodeNull",
        "testEncodeEmpty",
        "testLocaleIndependence"
    ],
    "org.apache.commons.codec.language.DoubleMetaphone2Test": [
        "testDoubleMetaphonePrimary",
        "testDoubleMetaphoneAlternate",
        "testEncodeWithInvalidObject",
        "testEncodeNull",
        "testEncodeEmpty",
        "testLocaleIndependence"
    ],
    "org.apache.commons.codec.language.DoubleMetaphoneTest": [
        "testSetMaxCodeLength",
        "testIsDoubleMetaphoneEqualBasic",
        "testEmpty",
        "testCCedilla",
        "testCodec184",
        "testIsDoubleMetaphoneEqualExtended1",
        "testIsDoubleMetaphoneEqualExtended2",
        "testIsDoubleMetaphoneEqualExtended3",
        "testIsDoubleMetaphoneEqualWithMATCHES",
        "testDoubleMetaphone",
        "testNTilde",
        "testIsDoubleMetaphoneNotEqual",
        "testEncodeWithInvalidObject",
        "testEncodeNull",
        "testEncodeEmpty",
        "testLocaleIndependence"
    ],
    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest": [
        "testisEncodeEquals_CornerCase_SecondNameJustSpace_ReturnsFalse",
        "testCompare_SOPHIE_SOFIA_SuccessfullyMatched",
        "testGetMinRating_1_Returns5_Successfully",
        "testisEncodeEquals_CornerCase_SecondNameNothing_ReturnsFalse",
        "testCompare_SurnameCornerCase_Nulls_NoMatch",
        "testGetMinRating_7_Return4_Successfully",
        "testCompare_SAM_SAMUEL_SuccessfullyMatched",
        "testisEncodeEquals_CornerCase_FirstNameNothing_ReturnsFalse",
        "testgetMinRating_6_Returns4_Successfully",
        "testAccentRemoval_NullValue_ReturnNullSuccessfully",
        "testleftTorightThenRightToLeft_EINSTEIN_MICHAELA_Returns0",
        "testCompare_STEPHEN_STEVEN_SuccessfullyMatched",
        "testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched",
        "testCompare_SurnamesCornerCase_MURPHY_Space_NoMatch",
        "testCompare_OONA_OONAGH_SuccessfullyMatched",
        "testCompare_Forenames_SEAN_JOHN_MatchExpected",
        "testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched",
        "testCompare_TOMASZ_TOM_SuccessfullyMatched",
        "testCompare_KARL_ALESSANDRO_DoesNotMatch",
        "testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched",
        "testCompare_CATHERINE_KATHRYN_SuccessfullyMatched",
        "testRemoveVowel__AIDAN_Returns_ADN",
        "testIsVowel_CapitalA_ReturnsTrue",
        "testRemoveSingleDoubleConsonants_BUBLE_RemovedSuccessfully",
        "testRemoveDoubleConsonants_MISSISSIPPI_RemovedSuccessfully",
        "testAccentRemoval_MixedWithUnusualChars_SuccessfullyRemovedAndUnusualcharactersInvariant",
        "testGetEncoding_Null_to_Nothing",
        "testCompareNameSameNames_ReturnsFalseSuccessfully",
        "testGetMinRating_2_Returns5_Successfully",
        "testCompare_ZACH_ZAKARIA_SuccessfullyMatched",
        "testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched",
        "testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched",
        "testRemoveVowel_ALESSANDRA_Returns_ALSSNDR",
        "testCompare_ShortNames_AL_ED_WorksButNoMatch",
        "testAccentRemoval_ComprehensiveAccentMix_AllSuccessfullyRemoved",
        "testgetMinRating_7_Returns4_Successfully",
        "testCompare_SMITH_SMYTH_SuccessfullyMatched",
        "testGetEncoding_HARPER_HRPR",
        "testCompare_STEPHEN_STEFAN_SuccessfullyMatched",
        "testleftTorightThenRightToLeft_ALEXANDER_ALEXANDRA_Returns4",
        "testCompare_MICKY_MICHAEL_SuccessfullyMatched",
        "testIsVowel_SmallD_ReturnsFalse",
        "testAccentRemoval_GerSpanFrenMix_SuccessfullyRemoved",
        "testisEncodeEquals_CornerCase_SecondNameNull_ReturnsFalse",
        "testgetMinRating_11_Returns_3_Successfully",
        "testGetFirstLast3__ALEXANDER_Returns_Aleder",
        "testgetMinRating_5_Returns4_Successfully2",
        "testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched",
        "testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched",
        "testCompareNameNullSpace_ReturnsFalseSuccessfully",
        "testGetMinRating_13_Returns_1_Successfully",
        "testCompare_BURNS_BOURNE_SuccessfullyMatched",
        "testAccentRemovalNormalString_NoChange",
        "testCompare_SmallInput_CARK_Kl_SuccessfullyMatched",
        "testCompare_PETERSON_PETERS_SuccessfullyMatched",
        "testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched",
        "testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched",
        "testisEncodeEquals_CornerCase_FirstNameJust1Letter_ReturnsFalse",
        "testGetEncoding_NoSpace_to_Nothing",
        "testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch",
        "testRemoveDoubleDoubleVowel_BEETLE_NotRemoved",
        "testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot",
        "testCompare_STEVEN_STEFAN_SuccessfullyMatched",
        "testAccentRemoval_UpperandLower_SuccessfullyRemovedAndCaseInvariant",
        "testisEncodeEquals_CornerCase_FirstNameJustSpace_ReturnsFalse",
        "testcleanName_SuccessfullyClean",
        "testisEncodeEquals_CornerCase_FirstNameNull_ReturnsFalse",
        "testCompare_Forenames_SEAN_PETE_NoMatchExpected",
        "testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched",
        "testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch",
        "testisVowel_SingleVowel_ReturnsTrue",
        "testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch",
        "testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected",
        "testCompare_SEAN_SHAUN_SuccessfullyMatched",
        "testCompareNameToSingleLetter_KARL_C_DoesNotMatch",
        "testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched",
        "testGetEncoding_SMYTH_to_SMYTH",
        "testgetMinRating_8_Returns3_Successfully",
        "testGetFirstLast3_PETE_Returns_PETE",
        "testgetMinRating_5_Returns4_Successfully",
        "testAccentRemoval_NINO_NoChange",
        "testgetMinRating_10_Returns3_Successfully",
        "testGetEncoding_One_Letter_to_Nothing",
        "testAccentRemoval_AllLower_SuccessfullyRemoved",
        "testRemoveVowel__DECLAN_Returns_DCLN",
        "testGetEncoding_Space_to_Nothing",
        "testisEncodeEqualsSecondNameJust1Letter_ReturnsFalse",
        "testGetEncoding_SMITH_to_SMTH",
        "testAccentRemoval_WithSpaces_SuccessfullyRemovedAndSpacesInvariant",
        "testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched",
        "testCompare_SurnamesCornerCase_MURPHY_NoSpace_NoMatch",
        "testCompare_BRIAN_BRYAN_SuccessfullyMatched",
        "testEncodeWithInvalidObject",
        "testEncodeNull",
        "testEncodeEmpty",
        "testLocaleIndependence"
    ],
    "org.apache.commons.codec.language.MetaphoneTest": [
        "testTranslateOfSCHAndCH",
        "testTranslateToJOfDGEOrDGIOrDGY",
        "testTCH",
        "testWhy",
        "testIsMetaphoneEqual1",
        "testIsMetaphoneEqual2",
        "testPHTOF",
        "testDiscardOfSilentGN",
        "testIsMetaphoneEqualParis",
        "testIsMetaphoneEqualPeter",
        "testIsMetaphoneEqualSusan",
        "testIsMetaphoneEqualWhite",
        "testIsMetaphoneEqualXalan",
        "testIsMetaphoneEqualAlbert",
        "testIsMetaphoneEqualKnight",
        "testMetaphone",
        "testIsMetaphoneEqualWright",
        "testSHAndSIOAndSIAToX",
        "testSetMaxLengthWithTruncation",
        "testTIOAndTIAToX",
        "testExceedLength",
        "testWordEndingInMB",
        "testIsMetaphoneEqualAero",
        "testIsMetaphoneEqualGary",
        "testIsMetaphoneEqualJohn",
        "testIsMetaphoneEqualMary",
        "testDiscardOfSilentHAfterG",
        "testWordsWithCIA",
        "testDiscardOfSCEOrSCIOrSCY",
        "testIsMetaphoneEqualRay",
        "testEncodeWithInvalidObject",
        "testEncodeNull",
        "testEncodeEmpty",
        "testLocaleIndependence"
    ],
    "org.apache.commons.codec.language.NysiisTest": [
        "testRule4Dot1",
        "testRule4Dot2",
        "testCap",
        "testDad",
        "testDan",
        "testFal",
        "testRule1",
        "testRule2",
        "testRule5",
        "testRule6",
        "testRule7",
        "testBran",
        "testSnad",
        "testSnat",
        "testTrueVariant",
        "testDropBy",
        "testOthers",
        "testTranan",
        "testSpecialBranches",
        "testEncodeWithInvalidObject",
        "testEncodeNull",
        "testEncodeEmpty",
        "testLocaleIndependence"
    ],
    "org.apache.commons.codec.language.RefinedSoundexTest": [
        "testDifference",
        "testNewInstance",
        "testGetMappingCodeNonLetter",
        "testEncode",
        "testNewInstance2",
        "testNewInstance3",
        "testEncodeWithInvalidObject",
        "testEncodeNull",
        "testEncodeEmpty",
        "testLocaleIndependence"
    ],
    "org.apache.commons.codec.language.SoundexTest": [
        "testWikipediaAmericanSoundex",
        "testBadCharacters",
        "testSimplifiedSoundex",
        "testUsEnglishStatic",
        "testMsSqlServer1",
        "testMsSqlServer2",
        "testMsSqlServer3",
        "testB650",
        "testEncodeBatch2",
        "testEncodeBatch3",
        "testEncodeBatch4",
        "testSoundexUtilsNullBehaviour",
        "testEncodeIgnoreHyphens",
        "testEncodeIgnoreTrimmable",
        "testEncodeIgnoreApostrophes",
        "testGenealogy",
        "testDifference",
        "testNewInstance",
        "testEncodeBasic",
        "testUsMappingEWithAcute",
        "testNewInstance2",
        "testNewInstance3",
        "testSoundexUtilsConstructable",
        "testUsMappingOWithDiaeresis",
        "testHWRuleEx1",
        "testHWRuleEx2",
        "testHWRuleEx3",
        "testEncodeWithInvalidObject",
        "testEncodeNull",
        "testEncodeEmpty",
        "testLocaleIndependence"
    ],
    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest": [
        "testEncodeGna",
        "testAsciiEncodeNotEmpty1Letter",
        "testInvalidLanguageIllegalArgumentException",
        "testSetRuleTypeExact",
        "testAllChars",
        "testEncodeAtzNotEmpty",
        "testOOM",
        "testNegativeIndexForRuleMatchIndexOutOfBoundsException",
        "testInvalidLangIllegalArgumentException",
        "testAsciiEncodeNotEmpty2Letters",
        "testSpeedCheck",
        "testSetNameTypeAsh",
        "testSetConcat",
        "testSpeedCheck2",
        "testSpeedCheck3",
        "testSetRuleTypeToRulesIllegalArgumentException",
        "testLongestEnglishSurname",
        "testInvalidLangIllegalStateException",
        "testEncodeWithInvalidObject",
        "testEncodeNull",
        "testEncodeEmpty",
        "testLocaleIndependence"
    ],
    "org.apache.commons.codec.language.bm.LanguageGuessingTest": [
        "testLanguageGuessing[Renault-french-{2}]",
        "testLanguageGuessing[Mickiewicz-polish-{2}]",
        "testLanguageGuessing[Thompson-english-{2}]",
        "testLanguageGuessing[Nu\u00f1ez-spanish-{2}]",
        "testLanguageGuessing[Carvalho-portuguese-{2}]",
        "testLanguageGuessing[\u010capek-czech-{2}]",
        "testLanguageGuessing[Sjneijder-dutch-{2}]",
        "testLanguageGuessing[Klausewitz-german-{2}]",
        "testLanguageGuessing[K\u00fc\u00e7\u00fck-turkish-{2}]",
        "testLanguageGuessing[Giacometti-italian-{2}]",
        "testLanguageGuessing[Nagy-hungarian-{2}]",
        "testLanguageGuessing[Ceau\u015fescu-romanian-{2}]",
        "testLanguageGuessing[Angelopoulos-greeklatin-{2}]",
        "testLanguageGuessing[\u0391\u03b3\u03b3\u03b5\u03bb\u03cc\u03c0\u03bf\u03c5\u03bb\u03bf\u03c2-greek-{2}]",
        "testLanguageGuessing[\u041f\u0443\u0448\u043a\u0438\u043d-cyrillic-{2}]",
        "testLanguageGuessing[\u05db\u05d4\u05df-hebrew-{2}]",
        "testLanguageGuessing[\u00e1cz-any-{2}]",
        "testLanguageGuessing[\u00e1tz-any-{2}]"
    ],
    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest": [
        "testSolrGENERIC",
        "testSolrSEPHARDIC",
        "testCompatibilityWithOriginalVersion",
        "testSolrASHKENAZI"
    ],
    "org.apache.commons.codec.language.bm.PhoneticEngineTest": [
        "testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX]",
        "testEncode[Renault-rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinolt|rinult-ASHKENAZI-APPROX]",
        "testEncode[Renault-rinDlt-ASHKENAZI-APPROX]",
        "testEncode[Renault-rinDlt-SEPHARDIC-APPROX]",
        "testEncode[SntJohn-Smith-sntjonsmit-GENERIC-EXACT]",
        "testEncode[d'ortley-(ortlaj|ortlej)-(dortlaj|dortlej)-GENERIC-EXACT]",
        "testEncode[van helsing-(elSink|elsink|helSink|helsink|helzink|xelsink)-(banhelsink|fanhelsink|fanhelzink|vanhelsink|vanhelzink|vanjelsink)-GENERIC-EXACT]",
        "testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX]"
    ],
    "org.apache.commons.codec.language.bm.RuleTest": [
        "testPhonemeComparedToLaterIsNegative",
        "testSubSequenceWorks",
        "testPhonemeComparedToSelfIsZero"
    ],
    "org.apache.commons.codec.net.BCodecTest": [
        "testBase64ImpossibleSamples",
        "testUTF8RoundTrip",
        "testBasicEncodeDecode",
        "testDecodeStringWithNull",
        "testDecodeObjects",
        "testEncodeDecodeNull",
        "testInvalidEncoding",
        "testEncodeStringWithNull",
        "testEncodeObjects",
        "testNullInput"
    ],
    "org.apache.commons.codec.net.PercentCodecTest": [
        "testSafeCharEncodeDecodeObject",
        "testBasicSpace",
        "testPercentEncoderDecoderWithNullOrEmptyInput",
        "testDecodeNullObject",
        "testEncodeNullObject",
        "testBasicEncodeDecode",
        "testPercentEncoderDecoderWithPlusForSpace",
        "testConfigurablePercentEncoder",
        "testDecodeUnsupportedObject",
        "testEncodeUnsupportedObject",
        "testDecodeInvalidEncodedResultDecoding",
        "testUnsafeCharEncodeDecode"
    ],
    "org.apache.commons.codec.net.QCodecTest": [
        "testUTF8RoundTrip",
        "testEncodeDecodeBlanks",
        "testBasicEncodeDecode",
        "testLetUsMakeCloverHappy",
        "testDecodeStringWithNull",
        "testDecodeObjects",
        "testEncodeDecodeNull",
        "testInvalidEncoding",
        "testEncodeStringWithNull",
        "testEncodeObjects",
        "testUnsafeEncodeDecode",
        "testNullInput"
    ],
    "org.apache.commons.codec.net.QuotedPrintableCodecTest": [
        "testUTF8RoundTrip",
        "testEncodeNull",
        "testEncodeUrlWithNullBitSet",
        "testBasicEncodeDecode",
        "testDefaultEncoding",
        "testSafeCharEncodeDecode",
        "testDecodeInvalid",
        "testSkipNotEncodedCRLF",
        "testSoftLineBreakDecode",
        "testSoftLineBreakEncode",
        "testDecodeStringWithNull",
        "testDecodeObjects",
        "testEncodeDecodeNull",
        "testInvalidEncoding",
        "testUltimateSoftBreak",
        "testEncodeStringWithNull",
        "testTrailingSpecial",
        "testEncodeObjects",
        "testUnsafeEncodeDecode",
        "testDecodeWithNullArray",
        "testFinalBytes"
    ],
    "org.apache.commons.codec.net.RFC1522CodecTest": [
        "testDecodeInvalid",
        "testNullInput"
    ],
    "org.apache.commons.codec.net.URLCodecTest": [
        "testUTF8RoundTrip",
        "testEncodeNull",
        "testDecodeInvalidContent",
        "testEncodeUrlWithNullBitSet",
        "testBasicEncodeDecode",
        "testDefaultEncoding",
        "testSafeCharEncodeDecode",
        "testDecodeInvalid",
        "testDecodeStringWithNull",
        "testDecodeObjects",
        "testEncodeDecodeNull",
        "testInvalidEncoding",
        "testEncodeStringWithNull",
        "testEncodeObjects",
        "testUnsafeEncodeDecode",
        "testDecodeWithNullArray"
    ],
    "org.apache.commons.codec.net.UtilsTest": [
        "testConstructor"
    ]
}