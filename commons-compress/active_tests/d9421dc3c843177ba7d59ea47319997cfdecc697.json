{
    "org.apache.commons.compress.ArchiveReadTest": [
        "testArchive[file=FreeBSD_crc.cpio]",
        "testArchive[file=SunOS_odc.cpio]",
        "testArchive[file=SunOS_cf.tar]",
        "testArchive[file=SunOS_.cpio]",
        "testArchive[file=SunOS.ar]",
        "testArchive[file=FreeBSD_ustar.tar]",
        "testArchive[file=FreeBSD_.tar]",
        "testArchive[file=FreeBSD_hpbin.cpio]",
        "testArchive[file=SunOS.zip]",
        "testArchive[file=FreeBSD_bin.cpio]",
        "testArchive[file=SunOS_crc.cpio]",
        "testArchive[file=FreeBSD.zip]",
        "testArchive[file=FreeBSD_newc.cpio]",
        "testArchive[file=SunOS_-c.cpio]",
        "testArchive[file=SunOS_cEf.tar]",
        "testArchive[file=FreeBSD_pax.tar]",
        "testArchive[file=FreeBSD.ar]",
        "testArchive[file=SunOS_cAEf.tar]"
    ],
    "org.apache.commons.compress.ArchiveUtilsTest": [
        "testCompareBA",
        "testAsciiConversions",
        "sanitizeLeavesShortStringsAlone",
        "sanitizeShortensString",
        "testCompareAscii",
        "sanitizeRemovesUnprintableCharacters"
    ],
    "org.apache.commons.compress.ChainingTestCase": [
        "testTarGzip",
        "testTarBzip2"
    ],
    "org.apache.commons.compress.DetectArchiverTestCase": [
        "testDetection",
        "testEmptyJarArchive",
        "testEmptyZipArchive",
        "testDetectionNotArchive",
        "testCOMPRESS117",
        "testCOMPRESS335",
        "testEmptyCpioArchive"
    ],
    "org.apache.commons.compress.IOMethodsTest": [
        "testWriteJar",
        "testWriteTar",
        "testWriteZip",
        "testWriteCpio",
        "testReadCpio",
        "testReadJar",
        "testReadTar",
        "testReadZip",
        "testWriteAr",
        "testReadAr"
    ],
    "org.apache.commons.compress.archivers.ArTestCase": [
        "XtestDirectoryEntryFromFile",
        "testArDelete",
        "testArUnarchive",
        "testFileEntryFromFile",
        "testArArchiveCreation",
        "XtestExplicitDirectoryEntry",
        "testExplicitFileEntry"
    ],
    "org.apache.commons.compress.archivers.ArchiveOutputStreamTest": [
        "testCallSequenceAr",
        "testCallSequenceCpio",
        "testFinish",
        "testOptionalFinish",
        "testCallSequenceJar",
        "testCallSequenceTar",
        "testCallSequenceZip"
    ],
    "org.apache.commons.compress.archivers.ArchiveServiceLoaderTest": [
        "testInputStream",
        "testOutputStream"
    ],
    "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest": [
        "cantRead7zFromStream",
        "skipsPK00Prefix",
        "cantWrite7zToStream",
        "testEncodingInputStream",
        "testEncodingInputStreamAutodetect",
        "aiffFilesAreNoTARs",
        "testEncodingCtor",
        "shortTextFilesAreNoTARs",
        "detectsAndThrowsFor7z",
        "testCOMPRESS209",
        "testEncodingDeprecated",
        "testEncodingOutputStream"
    ],
    "org.apache.commons.compress.archivers.CpioTestCase": [
        "testCpioUnarchive",
        "testFileEntryFromFile",
        "testDirectoryEntryFromFile",
        "testExplicitDirectoryEntry",
        "testExplicitFileEntry",
        "testCpioArchiveCreation"
    ],
    "org.apache.commons.compress.archivers.DumpTestCase": [
        "testArchiveDetection",
        "testCompressedDumpUnarchiveAll",
        "testDumpUnarchiveAll",
        "testCheckArchive",
        "testCheckCompressedArchive",
        "testCompressedArchiveDetection"
    ],
    "org.apache.commons.compress.archivers.ExceptionMessageTest": [
        "testMessageWhenArchiverNameIsNull_1",
        "testMessageWhenArchiverNameIsNull_2",
        "testMessageWhenOutputStreamIsNull",
        "testMessageWhenInputStreamIsNull"
    ],
    "org.apache.commons.compress.archivers.JarTestCase": [
        "testJarUnarchive",
        "testJarArchiveCreation",
        "testJarUnarchiveAll"
    ],
    "org.apache.commons.compress.archivers.LongPathTest": [
        "testArchive[file=vmgump_posix.tar]",
        "testArchive[file=minotaur.jar]",
        "testArchive[file=minotaur.cpio]",
        "testArchive[file=vmgump_pax.tar]",
        "testArchive[file=vmgump_oldgnu.tar]",
        "testArchive[file=winXP_antgnu.tar]",
        "testArchive[file=minotaur-z.zip]",
        "testArchive[file=minotaur-0.jar]",
        "testArchive[file=minotaur_pax.tar]",
        "testArchive[file=cygwin_posix.tar]",
        "testArchive[file=cygwin_gnu.tar]",
        "testArchive[file=hudson.tar]",
        "testArchive[file=minotaur_ustar.tar]",
        "testArchive[file=cygwin_pax.tar]",
        "testArchive[file=minotaur-M.jar]",
        "testArchive[file=minotaur.ar]",
        "testArchive[file=minotaur-c.zip]",
        "testArchive[file=vmgump_ustar.tar]",
        "testArchive[file=cygwin_oldgnu.tar]",
        "testArchive[file=minotaur.zip]",
        "testArchive[file=minotaur_posix.tar]",
        "testArchive[file=hudson-E.tar]",
        "testArchive[file=cygwin_ustar.tar]",
        "testArchive[file=vmgump_gnu.tar]"
    ],
    "org.apache.commons.compress.archivers.LongSymLinkTest": [
        "testArchive[file=gnu.tar]"
    ],
    "org.apache.commons.compress.archivers.SevenZTestCase": [
        "testSevenZArchiveCreationUsingCopy",
        "testSevenZArchiveCreationUsingLZMA",
        "testSevenZArchiveCreationUsingBZIP2",
        "testSevenZArchiveCreationUsingLZMA2",
        "testSevenZArchiveCreationUsingDeflate"
    ],
    "org.apache.commons.compress.archivers.TarTestCase": [
        "testTarUnarchive",
        "testFileEntryFromFile",
        "testDirectoryEntryFromFile",
        "testTarArchiveLongNameCreation",
        "testTarArchiveCreation",
        "testExplicitDirectoryEntry",
        "testCOMPRESS114",
        "testCOMPRESS178",
        "testExplicitFileEntry"
    ],
    "org.apache.commons.compress.archivers.ZipTestCase": [
        "testUnixModeInAddRaw",
        "testSkipsPK00Prefix",
        "testZipUnarchive",
        "testFileEntryFromFile",
        "testDirectoryEntryFromFile",
        "testCopyRawEntriesFromFile",
        "testZipArchiveCreationInMemory",
        "testCopyRawZip64EntryFromFile",
        "testSkipEntryWithUnsupportedCompressionMethod",
        "testExplicitDirectoryEntry",
        "testSupportedCompressionMethod",
        "testListAllFilesWithNestedArchive",
        "testExplicitFileEntry",
        "testZipArchiveCreation"
    ],
    "org.apache.commons.compress.archivers.ar.ArArchiveInputStreamTest": [
        "testReadLongNamesBSD",
        "testReadLongNamesGNU"
    ],
    "org.apache.commons.compress.archivers.ar.ArArchiveOutputStreamTest": [
        "testLongFileNamesCauseExceptionByDefault",
        "testLongFileNamesWorkUsingBSDDialect"
    ],
    "org.apache.commons.compress.archivers.arj.ArjArchiveInputStreamTest": [
        "testReadingOfAttributesUnixVersion",
        "testArjUnarchive",
        "testReadingOfAttributesDosVersion"
    ],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStreamTest": [
        "testCpioUnarchive",
        "testCpioUnarchiveCreatedByRedlineRpm"
    ],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStreamTest": [
        "testWriteOldBinary"
    ],
    "org.apache.commons.compress.archivers.cpio.CpioUtilTest": [
        "oldBinMagic2ByteArraySwapped",
        "oldBinMagicFromByteArraySwapped",
        "oldBinMagicFromByteArrayNotSwapped",
        "oldBinMagic2ByteArrayNotSwapped"
    ],
    "org.apache.commons.compress.archivers.dump.DumpArchiveEntryTest": [
        "publicNameRemovesLeadingDotSlash",
        "publicNameAddsTrailingSlashForDirectories"
    ],
    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStreamTest": [
        "testNotADumpArchive",
        "testConsumesArchiveCompletely",
        "testNotADumpArchiveButBigEnough"
    ],
    "org.apache.commons.compress.archivers.dump.DumpArchiveUtilTest": [
        "convert16",
        "convert32",
        "convert64"
    ],
    "org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest": [
        "testJarMarker"
    ],
    "org.apache.commons.compress.archivers.memory.MemoryArchiveTestCase": [
        "testReading"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntryTest": [
        "shouldThrowIfNoCreationDateIsSet",
        "shouldThrowIfNoAccessDateIsSet",
        "shouldThrowIfNoLastModifiedDateIsSet"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZFileTest": [
        "testSignatureCheck",
        "test7zUnarchive",
        "testHelloWorldHeaderCompressionOffLZMA2",
        "getEntriesOfUnarchiveTest",
        "testCompressedHeaderWithNonDefaultDictionarySize",
        "testAllEmptyFilesArchive",
        "test7zDecryptUnarchive",
        "testRandomlySkippingEntries",
        "testEncryptedArchiveRequiresPassword",
        "getEntriesOfUnarchiveInMemoryTest",
        "test7zDeflateUnarchive",
        "testReadingBackDeltaDistance",
        "testHelloWorldHeaderCompressionOffCopy",
        "readEntriesOfSize0",
        "testReadingBackLZMA2DictSize"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest": [
        "shouldAllowNumberForBzip2",
        "shouldAllowNumberForLZMA2",
        "shouldAllowNumberForLZMA",
        "shouldAllowLZMA2OptionsForLZMA2",
        "shouldAllowLZMA2OptionsForLZMA",
        "shouldNotAllowStringOptionsForLZMA2",
        "shouldAllowNumberForDeflate",
        "shouldNotAllowStringOptionsForLZMA",
        "shouldAllowNullOptions"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZNativeHeapTest": [
        "testEndDeflaterOnCloseStream",
        "testEndInflaterOnCloseStream"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest": [
        "testLzma2WithIntConfiguration",
        "testLzmaWithIntConfiguration",
        "testLzma2Roundtrip",
        "testSevenEmptyFiles",
        "testBCJX86Roundtrip",
        "testBCJARMThumbRoundtrip",
        "testLzma2WithOptionsConfiguration",
        "testStackOfContentCompressions",
        "testEightFilesSomeNotEmpty",
        "testSixEmptyFiles",
        "testBCJPPCRoundtrip",
        "testDeltaRoundtrip",
        "testEightEmptyFiles",
        "testNineEmptyFiles",
        "testSixFilesSomeNotEmpty",
        "testBzip2WithConfiguration",
        "testLzmaWithOptionsConfiguration",
        "testCantFinishTwice",
        "testBCJARMRoundtrip",
        "testTwentyNineEmptyFiles",
        "testNineFilesSomeNotEmpty",
        "testCopyRoundtrip",
        "testBCJSparcRoundtrip",
        "testArchiveWithMixedMethods",
        "testDeflateWithConfiguration",
        "testDirectoriesOnly",
        "testDeflateRoundtrip",
        "testTwentyNineFilesSomeNotEmpty",
        "testStackOfContentCompressionsInMemory",
        "testDirectoriesAndEmptyFiles",
        "testBzip2Roundtrip",
        "testBCJIA64Roundtrip",
        "testSevenFilesSomeNotEmpty"
    ],
    "org.apache.commons.compress.archivers.tar.SparseFilesTest": [
        "testOldGNU",
        "testPaxGNU"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest": [
        "testTarFileWithFSRoot",
        "testLinkFlagConstructorWithPreserve",
        "testFileSystemRoot",
        "testLinkFlagConstructorWithFileFlag",
        "testMaxFileSize",
        "testLinkFlagConstructor"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest": [
        "workaroundForBrokenTimeHeader",
        "paxHeaderEntryWithEmptyValueRemovesKey",
        "shouldConsumeArchiveCompletely",
        "readsArchiveCompletely_COMPRESS245",
        "readSimplePaxHeader",
        "datePriorToEpochInGNUFormat",
        "shouldThrowAnExceptionOnTruncatedEntries",
        "secondEntryWinsWhenPaxHeaderContainsDuplicateKey",
        "survivesBlankLinesInPaxHeader",
        "shouldUseSpecifiedEncodingWhenReadingGNULongNames",
        "testCompress197",
        "shouldReadGNULongNameEntryWithWrongName",
        "datePriorToEpochInPAXFormat",
        "shouldReadBigGid",
        "survivesPaxHeaderWithNameEndingInSlash",
        "readPaxHeaderWithEmbeddedNewline",
        "readNonAsciiPaxHeader"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest": [
        "testWriteLongDirectoryNameGnuMode",
        "testPaxHeadersWithLength99",
        "testWriteSimplePaxHeaders",
        "testWriteLongDirectoryNamePosixMode",
        "testWriteLongLinkNameGnuMode",
        "testWriteLongLinkNameTruncateMode",
        "testWriteLongDirectoryNameTruncateMode",
        "testWriteLongLinkNamePosixMode",
        "testWriteNonAsciiNameWithUnfortunateNamePosixMode",
        "testCount",
        "testWriteLongFileNamePosixMode",
        "testPadsOutputToFullBlockLength",
        "testBigNumberStarMode",
        "testMaxFileSizeError",
        "testOldEntryStarMode",
        "testLongNameMd5Hash",
        "testRoundtripWith67CharFileNameGnu",
        "testWriteNonAsciiDirectoryNamePosixMode",
        "testBigNumberPosixMode",
        "testOldEntryPosixMode",
        "testOldEntryError",
        "testWriteLongDirectoryNameErrorMode",
        "testRoundtripWith67CharFileNamePosix",
        "testWriteLongLinkNameErrorMode",
        "testWriteNonAsciiPathNamePaxHeader",
        "testWriteNonAsciiLinkPathNamePaxHeader",
        "testPaxHeadersWithLength101"
    ],
    "org.apache.commons.compress.archivers.tar.TarUtilsTest": [
        "testRoundTripOctalOrBinary8",
        "testParseOctal",
        "testName",
        "testReadNegativeBinary12Byte",
        "testReadNegativeBinary8Byte",
        "testWriteNegativeBinary8Byte",
        "testRoundTripNames",
        "testRoundTripOctal",
        "testVerifyHeaderCheckSum",
        "testRoundTripOctalOrBinary12",
        "testParseOctalCompress330",
        "testOverflow",
        "testParseOctalInvalid",
        "testRoundEncoding",
        "testNegative",
        "testTrailers"
    ],
    "org.apache.commons.compress.archivers.zip.AsiExtraFieldTest": [
        "testClone",
        "testModes",
        "testContent",
        "testReparse"
    ],
    "org.apache.commons.compress.archivers.zip.BinaryTreeTest": [
        "testDecode"
    ],
    "org.apache.commons.compress.archivers.zip.BitStreamTest": [
        "testNextByteFromEmptyStream",
        "testEmptyStream",
        "testReadAlignedBytes",
        "testStream",
        "testNextByte"
    ],
    "org.apache.commons.compress.archivers.zip.CircularBufferTest": [
        "testCopy",
        "testPutAndGet"
    ],
    "org.apache.commons.compress.archivers.zip.EncryptedArchiveTest": [
        "testReadPasswordEncryptedEntryViaStream",
        "testReadPasswordEncryptedEntryViaZipFile"
    ],
    "org.apache.commons.compress.archivers.zip.ExplodeSupportTest": [
        "testArchiveWithImplodeCompression4K2Trees",
        "testZipStreamWithImplodeCompression8K3Trees",
        "testTikaTestArchive",
        "testArchiveWithImplodeCompression8K3Trees",
        "testZipStreamWithImplodeCompression4K2Trees",
        "testTikaTestStream"
    ],
    "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest": [
        "testMergeWithUnparseableData",
        "testMerge",
        "testParse",
        "testParseWithRead",
        "testParseWithSkip"
    ],
    "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest": [
        "testDataDescriptor",
        "testClone",
        "testParseEdgeCases",
        "testStrongEncryption",
        "testLanguageEncodingFlag",
        "testDefaults",
        "testEncryption"
    ],
    "org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest": [
        "testRead7ZipMultiVolumeArchiveForStream",
        "testRead7ZipMultiVolumeArchiveForFile"
    ],
    "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest": [
        "concurrent",
        "callableApi"
    ],
    "org.apache.commons.compress.archivers.zip.ScatterSampleTest": [
        "testSample"
    ],
    "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest": [
        "putArchiveEntry"
    ],
    "org.apache.commons.compress.archivers.zip.StreamCompressorTest": [
        "deflatedEntries",
        "storedEntries"
    ],
    "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest": [
        "testZipFileReadsUnicodeFields",
        "testCP437FileRoundtripImplicitUnicodeExtra",
        "testUtf8FileRoundtripImplicitUnicodeExtra",
        "testRead7ZipArchiveForStream",
        "testCP437FileRoundtripExplicitUnicodeExtra",
        "testRead7ZipArchive",
        "testUtf8FileRoundtripExplicitUnicodeExtra",
        "testASCIIFileRoundtripImplicitUnicodeExtra",
        "testReadWinZipArchiveForStream",
        "testUtf8FileRoundtripNoEFSImplicitUnicodeExtra",
        "testZipArchiveInputStreamReadsUnicodeFields",
        "testASCIIFileRoundtripExplicitUnicodeExtra",
        "testReadWinZipArchive",
        "testUtf8FileRoundtripNoEFSExplicitUnicodeExtra",
        "testUtf8Interoperability",
        "testRawNameReadFromZipFile",
        "testRawNameReadFromStream"
    ],
    "org.apache.commons.compress.archivers.zip.X000A_NTFSTest": [
        "simpleRountrip"
    ],
    "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest": [
        "testGettersSetters",
        "testMisc",
        "testBitsAreSetWithTime",
        "testSampleFile",
        "testWriteReadRoundtrip",
        "testParseReparse",
        "testGetHeaderId"
    ],
    "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest": [
        "testMisc",
        "testSampleFile",
        "testTrimLeadingZeroesForceMinLength4",
        "testParseReparse",
        "testGetHeaderId"
    ],
    "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest": [
        "testReadCDSizesAndOffset",
        "testWriteCDSizeOffsetAndDisk",
        "testReadLFHSizesOnly",
        "testWriteCDOnlySizes",
        "testWriteCDSizeAndOffset",
        "testWriteCDSizeAndDisk",
        "testReadCDSomethingAndDisk",
        "testReparseCDSingleEightByteData",
        "testReadLFHSizesAndDisk",
        "testReadCDSizesOffsetAndDisk",
        "testReadLFHSizesAndOffset",
        "testReadLFHSizesOffsetAndDisk"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest": [
        "testCompressionMethod",
        "testCopyConstructor",
        "testNullCommentEqualsEmptyComment",
        "testExtraFieldMerging",
        "testExtraFields",
        "testUnixMode",
        "testAddAsFirstExtraField",
        "testNotEquals"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest": [
        "shouldConsumeArchiveCompletely",
        "testReadingOfFirstStoredEntry",
        "testUnshrinkEntry",
        "properUseOfInflater",
        "testMessageWithCorruptFileName",
        "winzipBackSlashWorkaround",
        "testUnzipBZip2CompressedEntry",
        "testWithBytesAfterData",
        "shouldReadNestedZip",
        "testThrowOnInvalidEntry"
    ],
    "org.apache.commons.compress.archivers.zip.ZipEightByteIntegerTest": [
        "testBIToBytes",
        "testSign",
        "testBIFromBytes",
        "testLongFromBytes",
        "testLongToBytes",
        "testEquals"
    ],
    "org.apache.commons.compress.archivers.zip.ZipEncodingTest": [
        "testNioCp1252Encoding",
        "testSimpleCp437Encoding",
        "testSimpleCp850Encoding"
    ],
    "org.apache.commons.compress.archivers.zip.ZipFileTest": [
        "testSkipsPK00Prefix",
        "testReadingOfStoredEntry",
        "testDuplicateEntry",
        "testPhysicalOrder",
        "testReadingOfFirstStoredEntry",
        "testExcessDataInZip64ExtraField",
        "testCDOrder",
        "testUnshrinking",
        "testUnixSymlinkSampleFile",
        "testWinzipBackSlashWorkaround",
        "testCDOrderInMemory",
        "testUnzipBZip2CompressedEntry",
        "testDoubleClose"
    ],
    "org.apache.commons.compress.archivers.zip.ZipLongTest": [
        "testToBytes",
        "testPut",
        "testClone",
        "testSign",
        "testFromBytes",
        "testEquals"
    ],
    "org.apache.commons.compress.archivers.zip.ZipShortTest": [
        "testToBytes",
        "testPut",
        "testClone",
        "testSign",
        "testFromBytes",
        "testEquals"
    ],
    "org.apache.commons.compress.archivers.zip.ZipUtilTest": [
        "testSignedByteToUnsignedInt",
        "testUnsignedIntToSignedByte",
        "testOutsideCalendar",
        "testZipLong",
        "testMinTime",
        "testReverse",
        "testLongToBig",
        "testInsideCalendar",
        "testBigToLong",
        "testAdjustToLong"
    ],
    "org.apache.commons.compress.changes.ChangeSetTestCase": [
        "testDeleteFile2",
        "testAddDeleteToOneFileArchive",
        "testDeleteFromAndAddToZipUsingZipFilePerform",
        "testAddToEmptyArchive",
        "testRenameAndDelete",
        "testDeleteAddToOneFileArchive",
        "testAddAllreadyExistingWithReplaceFalse",
        "testChangeSetResults",
        "testDeleteFromAndAddToAr",
        "testAddMoveDelete",
        "testDeleteFromAr",
        "testDeleteAddDelete",
        "testDeleteDir",
        "testAddDeleteAdd",
        "testAddChangeTwiceWithoutReplace",
        "testDeletePlusAddSame",
        "testDeleteDir2",
        "testDeleteDir3",
        "testDeleteFile",
        "testAddAllreadyExistingWithReplaceTrue",
        "testDeleteFromJar",
        "testDeleteFromTar",
        "testDeleteFromZip",
        "testDeletePlusAdd",
        "testDeleteFromAndAddToJar",
        "testDeleteFromAndAddToTar",
        "testDeleteFromAndAddToZip",
        "testAddChangeTwice"
    ],
    "org.apache.commons.compress.compressors.BZip2TestCase": [
        "testBzip2Unarchive",
        "testBzipCreation",
        "testConcatenatedStreamsReadFirstOnly",
        "testConcatenatedStreamsReadFully",
        "testCOMPRESS131"
    ],
    "org.apache.commons.compress.compressors.BZip2UtilsTestCase": [
        "testGetCompressedFilename",
        "testIsCompressedFilename",
        "testGetUncompressedFilename"
    ],
    "org.apache.commons.compress.compressors.CompressorServiceLoaderTest": [
        "testInputStream",
        "testOutputStream"
    ],
    "org.apache.commons.compress.compressors.CompressorStreamFactoryRoundtripTest": [
        "testCompressorStreamFactoryRoundtrip[bzip2]",
        "testCompressorStreamFactoryRoundtrip[deflate]",
        "testCompressorStreamFactoryRoundtrip[gz]",
        "testCompressorStreamFactoryRoundtrip[xz]"
    ],
    "org.apache.commons.compress.compressors.DeflateTestCase": [
        "testRawDeflateUnarchive",
        "testRawDeflateCreation",
        "testDeflateUnarchive",
        "testDeflateCreation"
    ],
    "org.apache.commons.compress.compressors.DetectCompressorTestCase": [
        "testDetection",
        "testOverride",
        "testMutiples"
    ],
    "org.apache.commons.compress.compressors.FramedSnappyTestCase": [
        "testDefaultExtractionViaFactoryAutodetection",
        "testDefaultExtraction",
        "testDefaultExtractionViaFactory"
    ],
    "org.apache.commons.compress.compressors.GZipTestCase": [
        "testInteroperabilityWithGzipCompressorInputStream",
        "testInteroperabilityWithGZIPInputStream",
        "testMetadataRoundTrip",
        "testGzipUnarchive",
        "testGzipCreation",
        "testOverWrite",
        "testInvalidCompressionLevel",
        "testExtraFlagsFastestCompression",
        "testConcatenatedStreamsReadFirstOnly",
        "testConcatenatedStreamsReadFully",
        "testCorruptedInput",
        "testExtraFlagsDefaultCompression",
        "testExtraFlagsBestCompression"
    ],
    "org.apache.commons.compress.compressors.GzipUtilsTestCase": [
        "testGetCompressedFilename",
        "testIsCompressedFilename",
        "testGetUncompressedFilename"
    ],
    "org.apache.commons.compress.compressors.LZMATestCase": [
        "testLZMAUnarchiveWithAutodetection",
        "lzmaRoundtrip",
        "testLZMAUnarchive"
    ],
    "org.apache.commons.compress.compressors.Pack200TestCase": [
        "testInputStreamMethods",
        "testJarArchiveCreationTempFile",
        "testJarUnarchiveAllInMemory",
        "testJarArchiveCreationInMemory",
        "testJarUnarchiveAllFileArgInMemory",
        "testBadSignature",
        "testJarUnarchiveAllFileTempFile",
        "testOutputStreamMethods",
        "testShortSignature",
        "testGoodSignature",
        "testJarUnarchiveAllTempFile"
    ],
    "org.apache.commons.compress.compressors.XZTestCase": [
        "testXZCreation",
        "testConcatenatedStreamsReadFirstOnly",
        "testConcatenatedStreamsReadFully",
        "testXZUnarchive"
    ],
    "org.apache.commons.compress.compressors.ZTestCase": [
        "testZUnarchiveViaFactory",
        "testZUnarchive",
        "testZUnarchiveViaAutoDetection",
        "testMatches"
    ],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStreamTest": [
        "readOfLength0ShouldReturn0",
        "shouldThrowAnIOExceptionWhenAppliedToAZipFile"
    ],
    "org.apache.commons.compress.compressors.bzip2.BlockSortTest": [
        "testSortFixture2MainSort",
        "testSortFixture2FallbackSort",
        "testFallbackSort",
        "testSortFixture",
        "testSortFixture2",
        "testSortFixtureMainSort",
        "testSortFixtureFallbackSort"
    ],
    "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test": [
        "testPartialReadTruncatedData",
        "testTruncatedData"
    ],
    "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStreamTest": [
        "singleByteReadWorksAsExpected",
        "singleByteReadReturnsMinusOneAtEof",
        "availableShouldReturnNonZero",
        "shouldBeAbleToSkipAByte"
    ],
    "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStreamTest": [
        "canReadASingleByteFlushAndFinish"
    ],
    "org.apache.commons.compress.compressors.deflate.DeflateParametersTest": [
        "shouldNotBeAbleToSetCompressionLevelToANegativeValue",
        "shouldNotBeAbleToSetCompressionLevelToADoubleDigitValue",
        "shouldBeAbleToSetCompressionLevel"
    ],
    "org.apache.commons.compress.compressors.lz77support.LZ77CompressorTest": [
        "nonCompressableWithLengthSmallerThanLiteralMax",
        "samIAmExampleWithFullArrayAvailableForCompression",
        "nonCompressableWithLengthThatForcesWindowSlide",
        "blaExampleWithFullArrayAvailableForCompression",
        "blaExampleSmallerWindowSize",
        "nonCompressableSentAsSingleBytes",
        "nonCompressableWithLengthGreaterThanLiteralMaxButLessThanTwiceWindowSize",
        "blaExampleWithSingleByteWrites",
        "blaExampleWithShorterMatchLength"
    ],
    "org.apache.commons.compress.compressors.lz77support.ParametersTest": [
        "maxOffsetIsWindowSizeIfBiggerThanWindowSize",
        "maxLiteralLengthIsWindowSizeIfSetToAValueTooBigToHoldInSlidingWindow",
        "maxLiteralLengthIsWindowSizeIfSetTo0",
        "maxLiteralLengthIsWindowSizeIfSetToANegativeValue",
        "defaultConstructor",
        "windowSizeMustNotBeAPowerOfTwo",
        "maxOffsetIsWindowSizeIfSetToANegativeValue",
        "maxMatchLengthIsInfiniteWhenSmallerThanMinMatchLength",
        "maxMatchLengthIsMinMatchLengthIfBothAreEqual",
        "allParametersUsuallyTakeTheirSpecifiedValues",
        "minMatchLengthIsAtLeastThree",
        "windowSizeMustNotBeSmallerThanMinMatchLength",
        "maxOffsetIsWindowSizeIfSetTo0"
    ],
    "org.apache.commons.compress.compressors.lzma.LZMAUtilsTestCase": [
        "testTurningOnCachingReEvaluatesAvailability",
        "testGetCompressedFilename",
        "testCanTurnOffCaching",
        "testIsCompressedFilename",
        "testMatches",
        "testCachingIsEnabledByDefaultAndLZMAIsPresent",
        "testGetUncompressedFilename"
    ],
    "org.apache.commons.compress.compressors.pack200.Pack200UtilsTest": [
        "testNormalizeInPlace",
        "testNormalize"
    ],
    "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest": [
        "testRemainingChunkTypes",
        "testUnskippableChunk",
        "testAvailable",
        "testLoremIpsum",
        "testMatches",
        "readIWAFile",
        "testChecksumUnmasking"
    ],
    "org.apache.commons.compress.compressors.xz.XZCompressorInputStreamTest": [
        "redundantTestOfAlmostDeprecatedMatchesMethod"
    ],
    "org.apache.commons.compress.compressors.xz.XZUtilsTestCase": [
        "testTurningOnCachingReEvaluatesAvailability",
        "testGetCompressedFilename",
        "testCanTurnOffCaching",
        "testIsCompressedFilename",
        "testMatches",
        "testCachingIsEnabledByDefaultAndXZIsPresent",
        "testGetUncompressedFilename"
    ],
    "org.apache.commons.compress.utils.BitInputStreamTest": [
        "testClearBitCache",
        "testReading30BitsInBigEndian",
        "testEOF",
        "testReading30BitsInLittleEndian",
        "shouldNotAllowReadingOfANegativeAmountOfBits",
        "littleEndianWithOverflow",
        "shouldNotAllowReadingOfMoreThan63BitsAtATime",
        "testReading24BitsInBigEndian",
        "testReading24BitsInLittleEndian",
        "bigEndianWithOverflow",
        "testReading17BitsInBigEndian",
        "testReading31BitsInBigEndian",
        "testReading31BitsInLittleEndian",
        "testReading17BitsInLittleEndian"
    ],
    "org.apache.commons.compress.utils.CharsetsTest": [
        "testUtf16",
        "testUtf8",
        "testUsAscii",
        "testUtf16Be",
        "testUtf16Le",
        "testToCharset",
        "testIso8859_1"
    ],
    "org.apache.commons.compress.utils.CountingStreamTest": [
        "output",
        "input"
    ],
    "org.apache.commons.compress.utils.IOUtilsTest": [
        "skipUsingRead",
        "skipUsingSkip",
        "readFullyOnChannelThrowsEof",
        "readFullyOnChannelReadsFully",
        "skipUsingSkipAndRead"
    ],
    "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest": [
        "shouldSetProperPosition",
        "shouldSignalEOFWhenPositionAtTheEnd",
        "shouldThrowExceptionWhenSettingPositionOnClosedChannel",
        "shouldThrowExceptionOnWritingToClosedChannel",
        "shouldWriteDataProperlyAfterPositionSet",
        "shouldThrowExceptionOnReadingClosedChannel",
        "shouldReadContentsProperly",
        "shouldThrowExceptionWhenSettingIncorrectPosition",
        "shouldReadContentsWhenBiggerBufferSupplied",
        "shouldWriteDataProperly",
        "shouldSetProperPositionOnTruncate",
        "shouldTruncateContentsProperly",
        "shouldReadDataFromSetPosition"
    ]
}