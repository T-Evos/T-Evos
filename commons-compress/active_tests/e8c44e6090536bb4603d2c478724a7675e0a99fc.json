{
    "org.apache.commons.compress.ArchiveReadTest": [
        "testArchive[file=FreeBSD_crc.cpio]",
        "testArchive[file=SunOS_odc.cpio]",
        "testArchive[file=SunOS_cf.tar]",
        "testArchive[file=SunOS_.cpio]",
        "testArchive[file=SunOS.ar]",
        "testArchive[file=FreeBSD_ustar.tar]",
        "testArchive[file=FreeBSD_.tar]",
        "testArchive[file=FreeBSD_hpbin.cpio]",
        "testArchive[file=SunOS.zip]",
        "testArchive[file=FreeBSD_bin.cpio]",
        "testArchive[file=SunOS_crc.cpio]",
        "testArchive[file=FreeBSD.zip]",
        "testArchive[file=FreeBSD_newc.cpio]",
        "testArchive[file=SunOS_-c.cpio]",
        "testArchive[file=SunOS_cEf.tar]",
        "testArchive[file=FreeBSD_pax.tar]",
        "testArchive[file=FreeBSD.ar]",
        "testArchive[file=SunOS_cAEf.tar]"
    ],
    "org.apache.commons.compress.ArchiveUtilsTest": [
        "testToAsciiBytes",
        "testToAsciiStringThrowsStringIndexOutOfBoundsException",
        "testToStringWithNonNull",
        "testCompareBA",
        "testAsciiConversions",
        "testIsEqualWithNullWithPositive",
        "sanitizeLeavesShortStringsAlone",
        "sanitizeShortensString",
        "testCompareAscii",
        "sanitizeRemovesUnprintableCharacters",
        "testIsEqual"
    ],
    "org.apache.commons.compress.ChainingTestCase": [
        "testTarGzip",
        "testTarBzip2"
    ],
    "org.apache.commons.compress.DetectArchiverTestCase": [
        "testDetection",
        "testEmptyJarArchive",
        "testEmptyZipArchive",
        "testDetectionNotArchive",
        "testCOMPRESS117",
        "testCOMPRESS335",
        "testEmptyCpioArchive"
    ],
    "org.apache.commons.compress.IOMethodsTest": [
        "testWriteJar",
        "testWriteTar",
        "testWriteZip",
        "testWriteCpio",
        "testReadCpio",
        "testReadJar",
        "testReadTar",
        "testReadZip",
        "testWriteAr",
        "testReadAr"
    ],
    "org.apache.commons.compress.OsgiITest": [
        "loadBundle"
    ],
    "org.apache.commons.compress.archivers.ArTestCase": [
        "XtestDirectoryEntryFromFile",
        "testArDelete",
        "testArUnarchive",
        "testFileEntryFromFile",
        "testArArchiveCreation",
        "XtestExplicitDirectoryEntry",
        "testExplicitFileEntry"
    ],
    "org.apache.commons.compress.archivers.ArchiveOutputStreamTest": [
        "testCallSequenceAr",
        "testCallSequenceCpio",
        "testFinish",
        "testOptionalFinish",
        "testCallSequenceJar",
        "testCallSequenceTar",
        "testCallSequenceZip"
    ],
    "org.apache.commons.compress.archivers.ArchiveServiceLoaderTest": [
        "testInputStream",
        "testOutputStream"
    ],
    "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest": [
        "cantRead7zFromStream",
        "skipsPK00Prefix",
        "cantWrite7zToStream",
        "testEncodingInputStream",
        "testEncodingInputStreamAutodetect",
        "aiffFilesAreNoTARs",
        "testEncodingCtor",
        "shortTextFilesAreNoTARs",
        "detectsAndThrowsFor7z",
        "testCOMPRESS209",
        "testDetect",
        "testEncodingDeprecated",
        "testEncodingOutputStream"
    ],
    "org.apache.commons.compress.archivers.CpioTestCase": [
        "testCpioUnarchive",
        "testFileEntryFromFile",
        "testDirectoryEntryFromFile",
        "testExplicitDirectoryEntry",
        "testExplicitFileEntry",
        "testCpioArchiveCreation"
    ],
    "org.apache.commons.compress.archivers.DumpTestCase": [
        "testArchiveDetection",
        "testCompressedDumpUnarchiveAll",
        "testDumpUnarchiveAll",
        "testCheckArchive",
        "testCheckCompressedArchive",
        "testCompressedArchiveDetection"
    ],
    "org.apache.commons.compress.archivers.ExceptionMessageTest": [
        "testMessageWhenArchiverNameIsNull_1",
        "testMessageWhenArchiverNameIsNull_2",
        "testMessageWhenOutputStreamIsNull",
        "testMessageWhenInputStreamIsNull"
    ],
    "org.apache.commons.compress.archivers.JarTestCase": [
        "testJarUnarchive",
        "testJarArchiveCreation",
        "testJarUnarchiveAll"
    ],
    "org.apache.commons.compress.archivers.LongPathTest": [
        "testArchive[file=vmgump_posix.tar]",
        "testArchive[file=minotaur.jar]",
        "testArchive[file=minotaur.cpio]",
        "testArchive[file=vmgump_pax.tar]",
        "testArchive[file=vmgump_oldgnu.tar]",
        "testArchive[file=winXP_antgnu.tar]",
        "testArchive[file=minotaur-z.zip]",
        "testArchive[file=minotaur-0.jar]",
        "testArchive[file=minotaur_pax.tar]",
        "testArchive[file=cygwin_posix.tar]",
        "testArchive[file=cygwin_gnu.tar]",
        "testArchive[file=hudson.tar]",
        "testArchive[file=minotaur_ustar.tar]",
        "testArchive[file=cygwin_pax.tar]",
        "testArchive[file=minotaur-M.jar]",
        "testArchive[file=minotaur.ar]",
        "testArchive[file=minotaur-c.zip]",
        "testArchive[file=vmgump_ustar.tar]",
        "testArchive[file=cygwin_oldgnu.tar]",
        "testArchive[file=minotaur.zip]",
        "testArchive[file=minotaur_posix.tar]",
        "testArchive[file=hudson-E.tar]",
        "testArchive[file=cygwin_ustar.tar]",
        "testArchive[file=vmgump_gnu.tar]"
    ],
    "org.apache.commons.compress.archivers.LongSymLinkTest": [
        "testArchive[file=gnu.tar]"
    ],
    "org.apache.commons.compress.archivers.SevenZTestCase": [
        "testSevenZArchiveCreationUsingCopy",
        "testSevenZArchiveCreationUsingLZMA",
        "testSevenZArchiveCreationUsingBZIP2",
        "testSevenZArchiveCreationUsingLZMA2",
        "testSevenZArchiveCreationUsingDeflate"
    ],
    "org.apache.commons.compress.archivers.TarTestCase": [
        "testTarUnarchive",
        "testFileEntryFromFile",
        "testDirectoryEntryFromFile",
        "testTarArchiveLongNameCreation",
        "testTarArchiveCreation",
        "testExplicitDirectoryEntry",
        "testCOMPRESS114",
        "testCOMPRESS178",
        "testExplicitFileEntry"
    ],
    "org.apache.commons.compress.archivers.ZipTestCase": [
        "testUnixModeInAddRaw",
        "testSkipsPK00Prefix",
        "testZipUnarchive",
        "testFileEntryFromFile",
        "testDirectoryEntryFromFile",
        "inputStreamStatisticsForStoredEntry",
        "testCopyRawEntriesFromFile",
        "inputStreamStatisticsForImplodedEntry",
        "testZipArchiveCreationInMemory",
        "testCopyRawZip64EntryFromFile",
        "inputStreamStatisticsOfZipBombExcel",
        "inputStreamStatisticsForBzip2Entry",
        "testSkipEntryWithUnsupportedCompressionMethod",
        "testExplicitDirectoryEntry",
        "inputStreamStatisticsForShrunkEntry",
        "testSupportedCompressionMethod",
        "testListAllFilesWithNestedArchive",
        "testExplicitFileEntry",
        "inputStreamStatisticsForDeflate64Entry",
        "testZipArchiveCreation"
    ],
    "org.apache.commons.compress.archivers.ar.ArArchiveInputStreamTest": [
        "testReadLongNamesBSD",
        "testReadLongNamesGNU"
    ],
    "org.apache.commons.compress.archivers.ar.ArArchiveOutputStreamTest": [
        "testLongFileNamesCauseExceptionByDefault",
        "testLongFileNamesWorkUsingBSDDialect"
    ],
    "org.apache.commons.compress.archivers.arj.ArjArchiveInputStreamTest": [
        "testReadingOfAttributesUnixVersion",
        "testArjUnarchive",
        "testReadingOfAttributesDosVersion"
    ],
    "org.apache.commons.compress.archivers.arj.CoverageTest": [
        "testHostOsInstance",
        "testHeaderInstances",
        "testCallLFHToString"
    ],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStreamTest": [
        "testCpioUnarchive",
        "testCpioUnarchiveCreatedByRedlineRpm"
    ],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStreamTest": [
        "testWriteOldBinary"
    ],
    "org.apache.commons.compress.archivers.cpio.CpioUtilTest": [
        "oldBinMagic2ByteArraySwapped",
        "oldBinMagicFromByteArraySwapped",
        "testLong2byteArrayWithPositiveThrowsUnsupportedOperationException",
        "oldBinMagicFromByteArrayNotSwapped",
        "testLong2byteArrayWithZeroThrowsUnsupportedOperationException",
        "testByteArray2longThrowsUnsupportedOperationException",
        "oldBinMagic2ByteArrayNotSwapped"
    ],
    "org.apache.commons.compress.archivers.dump.DumpArchiveEntryTest": [
        "publicNameRemovesLeadingDotSlash",
        "publicNameAddsTrailingSlashForDirectories"
    ],
    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStreamTest": [
        "testNotADumpArchive",
        "testConsumesArchiveCompletely",
        "testNotADumpArchiveButBigEnough"
    ],
    "org.apache.commons.compress.archivers.dump.DumpArchiveUtilTest": [
        "convert16",
        "convert32",
        "convert64"
    ],
    "org.apache.commons.compress.archivers.examples.ExpanderTest": [
        "sevenZTwoFileVersionWithAutoDetection",
        "zipFileVersion",
        "fileCantEscapeViaAbsolutePath",
        "sevenZChannelVersion",
        "sevenZFileVersion",
        "fileCantEscapeDoubleDotPath",
        "sevenZInputStreamVersionWithAutoDetection",
        "sevenZTwoFileVersion",
        "sevenZInputStreamVersion"
    ],
    "org.apache.commons.compress.archivers.examples.ParameterizedArchiverTest": [
        "fileVersion[format=tar]",
        "archiveStreamVersion[format=tar]",
        "channelVersion[format=tar]",
        "outputStreamVersion[format=tar]",
        "fileVersion[format=cpio]",
        "archiveStreamVersion[format=cpio]",
        "channelVersion[format=cpio]",
        "outputStreamVersion[format=cpio]",
        "fileVersion[format=zip]",
        "archiveStreamVersion[format=zip]",
        "channelVersion[format=zip]",
        "outputStreamVersion[format=zip]"
    ],
    "org.apache.commons.compress.archivers.examples.ParameterizedExpanderTest": [
        "fileVersion[format=tar]",
        "inputStreamVersion[format=tar]",
        "channelVersion[format=tar]",
        "archiveInputStreamVersion[format=tar]",
        "inputStreamVersionWithAutoDetection[format=tar]",
        "fileVersionWithAutoDetection[format=tar]",
        "fileVersion[format=cpio]",
        "inputStreamVersion[format=cpio]",
        "channelVersion[format=cpio]",
        "archiveInputStreamVersion[format=cpio]",
        "inputStreamVersionWithAutoDetection[format=cpio]",
        "fileVersionWithAutoDetection[format=cpio]",
        "fileVersion[format=zip]",
        "inputStreamVersion[format=zip]",
        "channelVersion[format=zip]",
        "archiveInputStreamVersion[format=zip]",
        "inputStreamVersionWithAutoDetection[format=zip]",
        "fileVersionWithAutoDetection[format=zip]"
    ],
    "org.apache.commons.compress.archivers.examples.SevenZArchiverTest": [
        "fileVersion",
        "channelVersion",
        "outputStreamVersion",
        "unknownFormat"
    ],
    "org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest": [
        "testJarMarker"
    ],
    "org.apache.commons.compress.archivers.jar.JarMarkerTest": [
        "testJarMarkerLengthCheck"
    ],
    "org.apache.commons.compress.archivers.memory.MemoryArchiveTestCase": [
        "testReading"
    ],
    "org.apache.commons.compress.archivers.sevenz.AES256SHA256DecoderTest": [
        "testDecodeWithNonEmptyString"
    ],
    "org.apache.commons.compress.archivers.sevenz.CoverageTest": [
        "testNidInstance",
        "testCLIInstance"
    ],
    "org.apache.commons.compress.archivers.sevenz.FolderTest": [
        "testFindBindPairForInStream",
        "testGetUnpackSizeOne",
        "testGetUnpackSizeTwo",
        "testGetUnpackSizeForCoderOne"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntryTest": [
        "shouldThrowIfNoCreationDateIsSet",
        "shouldThrowIfNoAccessDateIsSet",
        "shouldThrowIfNoLastModifiedDateIsSet"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZFileTest": [
        "testSignatureCheck",
        "test7zUnarchive",
        "test7zDeflate64Unarchive",
        "testHelloWorldHeaderCompressionOffLZMA2",
        "getEntriesOfUnarchiveTest",
        "testCompressedHeaderWithNonDefaultDictionarySize",
        "testAllEmptyFilesArchive",
        "test7zDecryptUnarchive",
        "testRandomlySkippingEntries",
        "testEncryptedArchiveRequiresPassword",
        "getEntriesOfUnarchiveInMemoryTest",
        "test7zDeflateUnarchive",
        "testReadingBackDeltaDistance",
        "test7zDecryptUnarchiveUsingCharArrayPassword",
        "testHelloWorldHeaderCompressionOffCopy",
        "readEntriesOfSize0",
        "testReadingBackLZMA2DictSize"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfigurationTest": [
        "shouldAllowNumberForBzip2",
        "shouldAllowNumberForLZMA2",
        "shouldAllowNumberForLZMA",
        "shouldAllowLZMA2OptionsForLZMA2",
        "shouldAllowLZMA2OptionsForLZMA",
        "shouldNotAllowStringOptionsForLZMA2",
        "shouldAllowNumberForDeflate",
        "shouldNotAllowStringOptionsForLZMA",
        "shouldAllowNullOptions"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZNativeHeapTest": [
        "testEndDeflaterOnCloseStream",
        "testEndInflaterOnCloseStream"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFileTest": [
        "testLzma2WithIntConfiguration",
        "testLzmaWithIntConfiguration",
        "testLzma2Roundtrip",
        "testSevenEmptyFiles",
        "testBCJX86Roundtrip",
        "testBCJARMThumbRoundtrip",
        "testLzma2WithOptionsConfiguration",
        "testStackOfContentCompressions",
        "testEightFilesSomeNotEmpty",
        "testSixEmptyFiles",
        "testBCJPPCRoundtrip",
        "testDeltaRoundtrip",
        "testEightEmptyFiles",
        "testNineEmptyFiles",
        "testSixFilesSomeNotEmpty",
        "testBzip2WithConfiguration",
        "testLzmaWithOptionsConfiguration",
        "testCantFinishTwice",
        "testBCJARMRoundtrip",
        "testTwentyNineEmptyFiles",
        "testNineFilesSomeNotEmpty",
        "testCopyRoundtrip",
        "testBCJSparcRoundtrip",
        "testArchiveWithMixedMethods",
        "testDeflateWithConfiguration",
        "testDirectoriesOnly",
        "testDeflateRoundtrip",
        "testTwentyNineFilesSomeNotEmpty",
        "testStackOfContentCompressionsInMemory",
        "testDirectoriesAndEmptyFiles",
        "testBzip2Roundtrip",
        "testBCJIA64Roundtrip",
        "testSevenFilesSomeNotEmpty"
    ],
    "org.apache.commons.compress.archivers.tar.SparseFilesTest": [
        "testOldGNU",
        "testPaxGNU"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntryTest": [
        "preservesDriveSpecOnWindowsAndNetwareIfAskedTo",
        "testTarFileWithFSRoot",
        "testExtraPaxHeaders",
        "testLinkFlagConstructorWithPreserve",
        "testFileSystemRoot",
        "testLinkFlagConstructorWithFileFlag",
        "testMaxFileSize",
        "testLinkFlagConstructor"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest": [
        "workaroundForBrokenTimeHeader",
        "paxHeaderEntryWithEmptyValueRemovesKey",
        "shouldConsumeArchiveCompletely",
        "readsArchiveCompletely_COMPRESS245",
        "readSimplePaxHeader",
        "datePriorToEpochInGNUFormat",
        "shouldThrowAnExceptionOnTruncatedEntries",
        "secondEntryWinsWhenPaxHeaderContainsDuplicateKey",
        "survivesBlankLinesInPaxHeader",
        "shouldUseSpecifiedEncodingWhenReadingGNULongNames",
        "skipsDevNumbersWhenEntryIsNoDevice",
        "testCompress197",
        "testGetAndSetOfPaxEntry",
        "shouldReadGNULongNameEntryWithWrongName",
        "datePriorToEpochInPAXFormat",
        "shouldReadBigGid",
        "survivesPaxHeaderWithNameEndingInSlash",
        "readPaxHeaderWithEmbeddedNewline",
        "readNonAsciiPaxHeader"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStreamTest": [
        "testWriteLongDirectoryNameGnuMode",
        "testPaxHeadersWithLength99",
        "testWriteSimplePaxHeaders",
        "testWriteLongDirectoryNamePosixMode",
        "testWriteLongLinkNameGnuMode",
        "testWriteLongLinkNameTruncateMode",
        "testWriteLongDirectoryNameTruncateMode",
        "testWriteLongLinkNamePosixMode",
        "testWriteNonAsciiNameWithUnfortunateNamePosixMode",
        "testCount",
        "testWriteLongFileNamePosixMode",
        "testBigNumberStarMode",
        "testMaxFileSizeError",
        "testOldEntryStarMode",
        "testRecordSize",
        "testLongNameMd5Hash",
        "testRoundtripWith67CharFileNameGnu",
        "testBlockSizes",
        "testWriteNonAsciiDirectoryNamePosixMode",
        "testBigNumberPosixMode",
        "testOldEntryPosixMode",
        "testOldEntryError",
        "testWriteLongDirectoryNameErrorMode",
        "testRoundtripWith67CharFileNamePosix",
        "testWriteLongLinkNameErrorMode",
        "testPutGlobalPaxHeaderEntry",
        "testWriteNonAsciiPathNamePaxHeader",
        "testWriteNonAsciiLinkPathNamePaxHeader",
        "testPaxHeadersWithLength101"
    ],
    "org.apache.commons.compress.archivers.tar.TarUtilsTest": [
        "testRoundTripOctalOrBinary8",
        "testParseOctal",
        "testName",
        "testReadNegativeBinary12Byte",
        "testReadNegativeBinary8Byte",
        "testWriteNegativeBinary8Byte",
        "testRoundTripNames",
        "testRoundTripOctal",
        "testVerifyHeaderCheckSum",
        "testRoundTripOctalOrBinary12",
        "testParseOctalCompress330",
        "testOverflow",
        "testParseOctalInvalid",
        "testRoundEncoding",
        "testNegative",
        "testRoundTripOctalOrBinary8_ValueTooBigForBinary",
        "testTrailers"
    ],
    "org.apache.commons.compress.archivers.zip.AsiExtraFieldTest": [
        "testClone",
        "testModes",
        "testContent",
        "testReparse"
    ],
    "org.apache.commons.compress.archivers.zip.BinaryTreeTest": [
        "testExceptions",
        "testDecode"
    ],
    "org.apache.commons.compress.archivers.zip.BitStreamTest": [
        "testNextByteFromEmptyStream",
        "testEmptyStream",
        "testReadAlignedBytes",
        "testStream",
        "testNextByte"
    ],
    "org.apache.commons.compress.archivers.zip.CircularBufferTest": [
        "testCopy",
        "testPutAndGet"
    ],
    "org.apache.commons.compress.archivers.zip.DataDescriptorTest": [
        "doesntWriteDataDescriptorWhenAddingRawEntries",
        "doesntWriteDataDescriptorForDeflatedEntryOnSeekableOutput",
        "writesDataDescriptorForDeflatedEntryOnUnseekableOutput"
    ],
    "org.apache.commons.compress.archivers.zip.EncryptedArchiveTest": [
        "testReadPasswordEncryptedEntryViaStream",
        "testReadPasswordEncryptedEntryViaZipFile"
    ],
    "org.apache.commons.compress.archivers.zip.ExplodeSupportTest": [
        "testArchiveWithImplodeCompression4K2Trees",
        "testConstructorThrowsExceptions",
        "testZipStreamWithImplodeCompression8K3Trees",
        "testTikaTestArchive",
        "testArchiveWithImplodeCompression8K3Trees",
        "testZipStreamWithImplodeCompression4K2Trees",
        "testTikaTestStream"
    ],
    "org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest": [
        "testMergeWithUnparseableData",
        "testMerge",
        "testParse",
        "parseTurnsArrayIndexOutOfBoundsIntoZipException",
        "testParseCentral",
        "testParseWithRead",
        "testParseWithSkip"
    ],
    "org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest": [
        "testDataDescriptor",
        "testClone",
        "testParseEdgeCases",
        "testStrongEncryption",
        "testLanguageEncodingFlag",
        "testDefaults",
        "testEncryption"
    ],
    "org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest": [
        "testRead7ZipMultiVolumeArchiveForStream",
        "testRead7ZipMultiVolumeArchiveForFile"
    ],
    "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreatorTest": [
        "concurrent",
        "callableApi"
    ],
    "org.apache.commons.compress.archivers.zip.PkWareExtraHeaderTest": [
        "testHashAlgorithm",
        "testEncryptionAlgorithm"
    ],
    "org.apache.commons.compress.archivers.zip.ScatterSampleTest": [
        "testSample"
    ],
    "org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest": [
        "putArchiveEntry"
    ],
    "org.apache.commons.compress.archivers.zip.StreamCompressorTest": [
        "deflatedEntries",
        "storedEntries",
        "testCreateDataOutputCompressor"
    ],
    "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest": [
        "testZipFileReadsUnicodeFields",
        "testCP437FileRoundtripImplicitUnicodeExtra",
        "testUtf8FileRoundtripImplicitUnicodeExtra",
        "testRead7ZipArchiveForStream",
        "testCP437FileRoundtripExplicitUnicodeExtra",
        "testRead7ZipArchive",
        "testUtf8FileRoundtripExplicitUnicodeExtra",
        "testASCIIFileRoundtripImplicitUnicodeExtra",
        "testReadWinZipArchiveForStream",
        "testUtf8FileRoundtripNoEFSImplicitUnicodeExtra",
        "testZipArchiveInputStreamReadsUnicodeFields",
        "testASCIIFileRoundtripExplicitUnicodeExtra",
        "testReadWinZipArchive",
        "testUtf8FileRoundtripNoEFSExplicitUnicodeExtra",
        "testUtf8Interoperability",
        "testRawNameReadFromZipFile",
        "testRawNameReadFromStream"
    ],
    "org.apache.commons.compress.archivers.zip.X000A_NTFSTest": [
        "simpleRountrip"
    ],
    "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest": [
        "testGettersSetters",
        "testMisc",
        "testBitsAreSetWithTime",
        "testSampleFile",
        "testWriteReadRoundtrip",
        "testParseReparse",
        "testGetHeaderId"
    ],
    "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest": [
        "testMisc",
        "testSampleFile",
        "testTrimLeadingZeroesForceMinLength4",
        "testParseReparse",
        "testGetHeaderId"
    ],
    "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraFieldTest": [
        "testReadCDSizesAndOffset",
        "testWriteCDSizeOffsetAndDisk",
        "testReadLFHSizesOnly",
        "testWriteCDOnlySizes",
        "testWriteCDSizeAndOffset",
        "testWriteCDSizeAndDisk",
        "testReadCDSomethingAndDisk",
        "testReparseCDSingleEightByteData",
        "testReadLFHSizesAndDisk",
        "testReadCDSizesOffsetAndDisk",
        "testReadLFHSizesAndOffset",
        "testReadLFHSizesOffsetAndDisk"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest": [
        "testCompressionMethod",
        "testIsUnixSymlink",
        "testCopyConstructor",
        "isUnixSymlinkIsFalseIfMoreThanOneFlagIsSet",
        "testNullCommentEqualsEmptyComment",
        "testExtraFieldMerging",
        "testExtraFields",
        "testUnixMode",
        "testAddAsFirstExtraField",
        "testNotEquals"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest": [
        "readDeflate64CompressedStreamWithDataDescriptor",
        "testOffsets",
        "nameSourceDefaultsToName",
        "shouldConsumeArchiveCompletely",
        "readDeflate64CompressedStream",
        "testReadingOfFirstStoredEntry",
        "nameSourceIsSetToEFS",
        "nameSourceIsSetToUnicodeExtraField",
        "testUnshrinkEntry",
        "properUseOfInflater",
        "testMessageWithCorruptFileName",
        "properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown",
        "winzipBackSlashWorkaround",
        "testUnzipBZip2CompressedEntry",
        "testWithBytesAfterData",
        "shouldReadNestedZip",
        "testThrowOnInvalidEntry"
    ],
    "org.apache.commons.compress.archivers.zip.ZipClassCoverageTest": [
        "testConstantConstructor",
        "testMessageException",
        "testConstructZip64RequiredException"
    ],
    "org.apache.commons.compress.archivers.zip.ZipEightByteIntegerTest": [
        "testBIToBytes",
        "testSign",
        "testBIFromBytes",
        "testLongFromBytes",
        "testLongToBytes",
        "testEquals"
    ],
    "org.apache.commons.compress.archivers.zip.ZipEncodingTest": [
        "testNioCp1252Encoding",
        "testNothingToMakeCoverallsHappier",
        "testSimpleCp437Encoding",
        "testGetNonexistentEncodng",
        "testSimpleCp850Encoding",
        "testIsUTF8",
        "testEbcidic"
    ],
    "org.apache.commons.compress.archivers.zip.ZipFileTest": [
        "testSkipsPK00Prefix",
        "testOffsets",
        "nameSourceDefaultsToName",
        "testEntryAlignmentExceed",
        "testReadingOfStoredEntry",
        "readDeflate64CompressedStream",
        "testDuplicateEntry",
        "testPhysicalOrder",
        "testReadingOfFirstStoredEntry",
        "testExcessDataInZip64ExtraField",
        "testCDOrder",
        "nameSourceIsSetToEFS",
        "testConcurrentReadFile",
        "nameSourceIsSetToUnicodeExtraField",
        "testUnshrinking",
        "testInvalidAlignment",
        "testUnixSymlinkSampleFile",
        "testDelayedOffsetsAndSizes",
        "testWinzipBackSlashWorkaround",
        "testCDOrderInMemory",
        "testConcurrentReadSeekable",
        "testUnzipBZip2CompressedEntry",
        "testEntryAlignment",
        "testDoubleClose"
    ],
    "org.apache.commons.compress.archivers.zip.ZipLongTest": [
        "testToBytes",
        "testPut",
        "testClone",
        "testSign",
        "testFromBytes",
        "testEquals"
    ],
    "org.apache.commons.compress.archivers.zip.ZipShortTest": [
        "testToBytes",
        "testPut",
        "testClone",
        "testSign",
        "testFromBytes",
        "testEquals"
    ],
    "org.apache.commons.compress.archivers.zip.ZipUtilTest": [
        "testSignedByteToUnsignedInt",
        "testUnsignedIntToSignedByte",
        "testOutsideCalendar",
        "testZipLong",
        "testMinTime",
        "testReverse",
        "testLongToBig",
        "testInsideCalendar",
        "testBigToLong",
        "testAdjustToLong"
    ],
    "org.apache.commons.compress.changes.ChangeSetTestCase": [
        "testDeleteFile2",
        "testAddDeleteToOneFileArchive",
        "testDeleteFromAndAddToZipUsingZipFilePerform",
        "testAddToEmptyArchive",
        "testRenameAndDelete",
        "testDeleteAddToOneFileArchive",
        "testAddAllreadyExistingWithReplaceFalse",
        "testChangeSetResults",
        "testDeleteFromAndAddToAr",
        "testAddMoveDelete",
        "testDeleteFromAr",
        "testDeleteAddDelete",
        "testDeleteDir",
        "testAddDeleteAdd",
        "testAddChangeTwiceWithoutReplace",
        "testDeletePlusAddSame",
        "testDeleteDir2",
        "testDeleteDir3",
        "testDeleteFile",
        "testAddAllreadyExistingWithReplaceTrue",
        "testDeleteFromJar",
        "testDeleteFromTar",
        "testDeleteFromZip",
        "testDeletePlusAdd",
        "testDeleteFromAndAddToJar",
        "testDeleteFromAndAddToTar",
        "testDeleteFromAndAddToZip",
        "testAddChangeTwice"
    ],
    "org.apache.commons.compress.changes.ChangeTest": [
        "testFailsToCreateChangeTakingThreeArgumentsThrowsNullPointerException",
        "testFailsToCreateChangeTakingFourArgumentsThrowsNullPointerExceptionOne",
        "testFailsToCreateChangeTakingFourArgumentsThrowsNullPointerExceptionTwo"
    ],
    "org.apache.commons.compress.compressors.BZip2TestCase": [
        "testBzip2Unarchive",
        "testBzipCreation",
        "testConcatenatedStreamsReadFirstOnly",
        "testConcatenatedStreamsReadFully",
        "testCOMPRESS131"
    ],
    "org.apache.commons.compress.compressors.BZip2UtilsTestCase": [
        "testGetCompressedFilename",
        "testIsCompressedFilename",
        "testGetUncompressedFilename"
    ],
    "org.apache.commons.compress.compressors.CompressorServiceLoaderTest": [
        "testInputStream",
        "testOutputStream"
    ],
    "org.apache.commons.compress.compressors.CompressorStreamFactoryRoundtripTest": [
        "testCompressorStreamFactoryRoundtrip[bzip2]",
        "testCompressorStreamFactoryRoundtrip[deflate]",
        "testCompressorStreamFactoryRoundtrip[gz]",
        "testCompressorStreamFactoryRoundtrip[xz]"
    ],
    "org.apache.commons.compress.compressors.DeflateTestCase": [
        "testRawDeflateUnarchive",
        "testRawDeflateCreation",
        "testDeflateUnarchive",
        "testDeflateCreation"
    ],
    "org.apache.commons.compress.compressors.DetectCompressorTestCase": [
        "testZMemoryLimit",
        "testLZMAMemoryLimit",
        "testDetection",
        "testXZMemoryLimitOnRead",
        "testXZMemoryLimitOnSkip",
        "testOverride",
        "testDetect",
        "testMutiples"
    ],
    "org.apache.commons.compress.compressors.FramedSnappyTestCase": [
        "testDefaultExtractionViaFactoryAutodetection",
        "testDefaultExtraction",
        "testDefaultExtractionViaFactory",
        "testRoundtrip",
        "testRoundtripWithOneBigWrite"
    ],
    "org.apache.commons.compress.compressors.GZipTestCase": [
        "testInteroperabilityWithGzipCompressorInputStream",
        "testInteroperabilityWithGZIPInputStream",
        "testMetadataRoundTrip",
        "testGzipUnarchive",
        "testGzipCreation",
        "testOverWrite",
        "testInvalidCompressionLevel",
        "testExtraFlagsFastestCompression",
        "testConcatenatedStreamsReadFirstOnly",
        "testConcatenatedStreamsReadFully",
        "testCorruptedInput",
        "testExtraFlagsDefaultCompression",
        "testExtraFlagsBestCompression"
    ],
    "org.apache.commons.compress.compressors.GzipUtilsTestCase": [
        "testGetCompressedFilename",
        "testIsCompressedFilename",
        "testGetUncompressedFilename"
    ],
    "org.apache.commons.compress.compressors.LZMATestCase": [
        "testLZMAUnarchiveWithAutodetection",
        "lzmaRoundtrip",
        "testLZMAUnarchive"
    ],
    "org.apache.commons.compress.compressors.Pack200TestCase": [
        "testInputStreamMethods",
        "testJarArchiveCreationTempFile",
        "testJarUnarchiveAllInMemory",
        "testJarArchiveCreationInMemory",
        "testJarUnarchiveAllFileArgInMemory",
        "testBadSignature",
        "testJarUnarchiveAllFileTempFile",
        "testOutputStreamMethods",
        "testShortSignature",
        "testGoodSignature",
        "testJarUnarchiveAllTempFile"
    ],
    "org.apache.commons.compress.compressors.XZTestCase": [
        "testXZCreation",
        "testConcatenatedStreamsReadFirstOnly",
        "testConcatenatedStreamsReadFully",
        "testXZUnarchive"
    ],
    "org.apache.commons.compress.compressors.ZTestCase": [
        "testZUnarchiveViaFactory",
        "testZUnarchive",
        "testZUnarchiveViaAutoDetection",
        "testMatches"
    ],
    "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStreamTest": [
        "testTurningOnCachingReEvaluatesAvailability",
        "testBrotliUnarchive",
        "testBrotliDecode",
        "testCanTurnOffCaching",
        "singleByteReadWorksAsExpected",
        "availableShouldReturnZero",
        "singleByteReadReturnsMinusOneAtEof",
        "testCachingIsEnabledByDefaultAndBrotliIsPresent",
        "shouldBeAbleToSkipAByte"
    ],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStreamTest": [
        "readOfLength0ShouldReturn0",
        "shouldThrowAnIOExceptionWhenAppliedToAZipFile"
    ],
    "org.apache.commons.compress.compressors.bzip2.BlockSortTest": [
        "testSortFixture2MainSort",
        "testSortFixture2FallbackSort",
        "testFallbackSort",
        "testSortFixture",
        "testSortFixture2",
        "testSortFixtureMainSort",
        "testSortFixtureFallbackSort"
    ],
    "org.apache.commons.compress.compressors.bzip2.PythonTruncatedBzip2Test": [
        "testPartialReadTruncatedData",
        "testTruncatedData"
    ],
    "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStreamTest": [
        "singleByteReadWorksAsExpected",
        "singleByteReadReturnsMinusOneAtEof",
        "availableShouldReturnNonZero",
        "shouldBeAbleToSkipAByte"
    ],
    "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStreamTest": [
        "canReadASingleByteFlushAndFinish"
    ],
    "org.apache.commons.compress.compressors.deflate.DeflateParametersTest": [
        "shouldNotBeAbleToSetCompressionLevelToANegativeValue",
        "shouldNotBeAbleToSetCompressionLevelToADoubleDigitValue",
        "shouldBeAbleToSetCompressionLevel"
    ],
    "org.apache.commons.compress.compressors.deflate64.Deflate64BugsTest": [
        "readBeyondMemoryException"
    ],
    "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStreamTest": [
        "streamIgnoresExtraBytesAfterDeflatedInput",
        "delegatesAvailable",
        "uncompressedBlock",
        "uncompressedBlockViaFactory",
        "throwsEOFExceptionOnTruncatedStreams",
        "uncompressedBlockAvailable",
        "closeIsDelegatedJustOnce",
        "readWhenClosed",
        "closeCallsDecoder",
        "properSizeWhenClosed"
    ],
    "org.apache.commons.compress.compressors.deflate64.HuffmanDecoderTest": [
        "decodeFixedHuffmanBlockWithMemoryLookupInExactBuffer",
        "decodeFixedHuffmanBlockWithMemoryLookup",
        "decodeSimpleFixedHuffmanBlock",
        "decodeUncompressedBlock",
        "decodeUncompressedBlockWithInvalidLenNLenValue",
        "decodeFixedHuffmanBlockWithMemoryLookupInSmallBuffer",
        "decodeSimpleFixedHuffmanBlockToSmallBuffer"
    ],
    "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStreamTest": [
        "readBlaLz4"
    ],
    "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStreamTest": [
        "rewritingOfFinalBlockWithTrailingLZ77Literals",
        "cantWriteBackReferenceIfAccumulatedOffsetIsTooShort",
        "pairAccumulatesLengths",
        "writesCompletePair",
        "pairSeesBackReferenceWhenSet",
        "canWriteBackReferenceFollowedByLongLiteral",
        "canWritePairWithoutBackReference",
        "rewritingOfFourPairs",
        "canWritePairWithoutLiterals",
        "rewritingOfFinalBlockWithoutTrailingLZ77Literals",
        "cantWriteBackReferenceFollowedByLiteralThatIsTooShort",
        "canWriteBackReferenceFollowedByShortLiteralIfOffsetIsBigEnough",
        "writesCorrectSizeFor274ByteLengthBackReference",
        "canWriteBackReferenceFollowedByShortLiteralIfLengthIsBigEnough",
        "rewritingWithFinalBackreferenceAndOffsetBiggerThan1",
        "writesCorrectSizeFor273ByteLengthBackReference",
        "writesCorrectSizeFor19ByteLengthBackReference",
        "writesCorrectSizeFor270ByteLengthLiteral",
        "writesCorrectSizeFor269ByteLengthLiteral",
        "writesCorrectSizeFor15ByteLengthLiteral"
    ],
    "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorRoundtripTest": [
        "biggerFileRoundtrip[using default]",
        "gzippedLoremIpsumRoundtrip[using default]",
        "blaTarRoundtrip[using default]",
        "biggerFileRoundtrip[using tuned for speed]",
        "gzippedLoremIpsumRoundtrip[using tuned for speed]",
        "blaTarRoundtrip[using tuned for speed]",
        "biggerFileRoundtrip[using tuned for compression ratio]",
        "gzippedLoremIpsumRoundtrip[using tuned for compression ratio]",
        "blaTarRoundtrip[using tuned for compression ratio]"
    ],
    "org.apache.commons.compress.compressors.lz4.FactoryTest": [
        "blockRoundtripViaFactory",
        "frameRoundtripViaFactory"
    ],
    "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStreamTest": [
        "rejectsNonLZ4Stream",
        "readBlaDumpLz4",
        "readBlaLz4WithDecompressConcatenated",
        "readDoubledBlaLz4ViaFactoryWithDecompressConcatenatedFalse",
        "skipsOverTrailingSkippableFrames",
        "rejectsTrailingBytesAfterValidFrame",
        "rejectsStreamsWithoutContentChecksum",
        "rejectsBlocksWithoutChecksum",
        "readsUncompressedBlocksUsingSingleByteRead",
        "readDoubledBlaLz4ViaFactoryWithoutExplicitDecompressConcatenated",
        "rejectsStreamsWithBadContentChecksum",
        "readDoubledBlaLz4WithoutExplicitDecompressConcatenated",
        "skipsOverSkippableFrames",
        "rejectsFileWithWrongVersion",
        "readDoubledBlaLz4WithDecompressConcatenatedFalse",
        "readBlaLz4",
        "rejectsSkippableFrameWithBadSignaturePrefix",
        "rejectsFileWithoutHeaderChecksum",
        "rejectsFileWithInsufficientContentSize",
        "rejectsSkippableFrameFollowedByJunk",
        "rejectsSkippableFrameWithBadSignatureTrailer",
        "readBlaLz4ViaFactory",
        "readsUncompressedBlocks",
        "readDoubledBlaLz4WithDecompressConcatenatedTrue",
        "testMatches",
        "rejectsSkippableFrameWithPrematureEndInLengthBytes",
        "readDoubledBlaLz4ViaFactoryWithDecompressConcatenatedTrue",
        "rejectsFileWithoutBlockSizeByte",
        "rejectsSkippableFrameFollowedByTooFewBytes",
        "rejectsSkippableFrameWithPrematureEnd",
        "readBlaLz4ViaFactoryWithDecompressConcatenated",
        "rejectsFileWithoutFrameDescriptor",
        "readBlaLz4ViaFactoryAutoDetection",
        "rejectsFileWithBadHeaderChecksum"
    ],
    "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorRoundtripTest": [
        "biggerFileRoundtrip[using LZ4 Parameters with BlockSize K64, withContentChecksum true, withBlockChecksum false, withBlockDependency false]",
        "gzippedLoremIpsumRoundtrip[using LZ4 Parameters with BlockSize K64, withContentChecksum true, withBlockChecksum false, withBlockDependency false]",
        "blaTarRoundtrip[using LZ4 Parameters with BlockSize K64, withContentChecksum true, withBlockChecksum false, withBlockDependency false]",
        "biggerFileRoundtrip[using LZ4 Parameters with BlockSize K256, withContentChecksum true, withBlockChecksum false, withBlockDependency false]",
        "gzippedLoremIpsumRoundtrip[using LZ4 Parameters with BlockSize K256, withContentChecksum true, withBlockChecksum false, withBlockDependency false]",
        "blaTarRoundtrip[using LZ4 Parameters with BlockSize K256, withContentChecksum true, withBlockChecksum false, withBlockDependency false]",
        "biggerFileRoundtrip[using LZ4 Parameters with BlockSize M1, withContentChecksum true, withBlockChecksum false, withBlockDependency false]",
        "gzippedLoremIpsumRoundtrip[using LZ4 Parameters with BlockSize M1, withContentChecksum true, withBlockChecksum false, withBlockDependency false]",
        "blaTarRoundtrip[using LZ4 Parameters with BlockSize M1, withContentChecksum true, withBlockChecksum false, withBlockDependency false]",
        "biggerFileRoundtrip[using LZ4 Parameters with BlockSize M4, withContentChecksum true, withBlockChecksum false, withBlockDependency false]",
        "biggerFileRoundtrip[using LZ4 Parameters with BlockSize M4, withContentChecksum true, withBlockChecksum false, withBlockDependency false]",
        "gzippedLoremIpsumRoundtrip[using LZ4 Parameters with BlockSize M4, withContentChecksum true, withBlockChecksum false, withBlockDependency false]",
        "gzippedLoremIpsumRoundtrip[using LZ4 Parameters with BlockSize M4, withContentChecksum true, withBlockChecksum false, withBlockDependency false]",
        "blaTarRoundtrip[using LZ4 Parameters with BlockSize M4, withContentChecksum true, withBlockChecksum false, withBlockDependency false]",
        "blaTarRoundtrip[using LZ4 Parameters with BlockSize M4, withContentChecksum true, withBlockChecksum false, withBlockDependency false]",
        "biggerFileRoundtrip[using LZ4 Parameters with BlockSize M4, withContentChecksum false, withBlockChecksum false, withBlockDependency false]",
        "gzippedLoremIpsumRoundtrip[using LZ4 Parameters with BlockSize M4, withContentChecksum false, withBlockChecksum false, withBlockDependency false]",
        "blaTarRoundtrip[using LZ4 Parameters with BlockSize M4, withContentChecksum false, withBlockChecksum false, withBlockDependency false]",
        "biggerFileRoundtrip[using LZ4 Parameters with BlockSize M4, withContentChecksum true, withBlockChecksum true, withBlockDependency false]",
        "gzippedLoremIpsumRoundtrip[using LZ4 Parameters with BlockSize M4, withContentChecksum true, withBlockChecksum true, withBlockDependency false]",
        "blaTarRoundtrip[using LZ4 Parameters with BlockSize M4, withContentChecksum true, withBlockChecksum true, withBlockDependency false]",
        "biggerFileRoundtrip[using LZ4 Parameters with BlockSize K64, withContentChecksum true, withBlockChecksum false, withBlockDependency true]",
        "gzippedLoremIpsumRoundtrip[using LZ4 Parameters with BlockSize K64, withContentChecksum true, withBlockChecksum false, withBlockDependency true]",
        "blaTarRoundtrip[using LZ4 Parameters with BlockSize K64, withContentChecksum true, withBlockChecksum false, withBlockDependency true]"
    ],
    "org.apache.commons.compress.compressors.lz4.XXHash32Test": [
        "verifyChecksum[0]",
        "verifyChecksum[1]",
        "verifyChecksum[2]"
    ],
    "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStreamTest": [
        "prefillCanBeUsedForBackReferences",
        "cantPrefillAfterDataHasBeenRead",
        "ifPrefillExceedsWindowSizeTheLastBytesAreUsed"
    ],
    "org.apache.commons.compress.compressors.lz77support.LZ77CompressorTest": [
        "nonCompressableWithLengthSmallerThanLiteralMax",
        "samIAmExampleWithFullArrayAvailableForCompression",
        "blaExampleWithShorterBackReferenceLength",
        "blaExampleWithPrefillBiggerThanWindowSize",
        "nonCompressableWithLengthThatForcesWindowSlide",
        "cantPrefillAfterCompress",
        "blaExampleWithFullArrayAvailableForCompression",
        "blaExampleSmallerWindowSize",
        "blaExampleWithPrefill",
        "blaExampleWithShortPrefill",
        "nonCompressableSentAsSingleBytes",
        "cantPrefillTwice",
        "nonCompressableWithLengthGreaterThanLiteralMaxButLessThanTwiceWindowSize",
        "blaExampleWithSingleByteWrites"
    ],
    "org.apache.commons.compress.compressors.lz77support.ParametersTest": [
        "maxLiteralLengthIsWindowSizeIfSetToAValueTooBigToHoldInSlidingWindow",
        "maxLiteralLengthIsWindowSizeIfSetTo0",
        "maxLiteralLengthIsWindowSizeIfSetToANegativeValue",
        "minBackReferenceLengthIsAtLeastThree",
        "defaultConstructor",
        "windowSizeMustBeAPowerOfTwo",
        "maxOffsetIsWindowSizeMinus1IfBiggerThanWindowSize",
        "maxBackReferenceLengthIsMinBackReferenceLengthIfBothAreEqual",
        "windowSizeMustNotBeSmallerThanMinBackReferenceLength",
        "maxOffsetIsWindowSizeMinus1IfSetTo0",
        "allParametersUsuallyTakeTheirSpecifiedValues",
        "maxOffsetIsWindowSizeMinus1IfSetToANegativeValue",
        "maxBackReferenceLengthIsMinBackReferenceLengthWhenSmallerThanMinBackReferenceLength",
        "maxBackReferenceLengthIsMinBackReferenceLengthWhenSmallerThanMinBackReferenceLengthReversedInvocationOrder"
    ],
    "org.apache.commons.compress.compressors.lzma.LZMAUtilsTestCase": [
        "testTurningOnCachingReEvaluatesAvailability",
        "testGetCompressedFilename",
        "testCanTurnOffCaching",
        "testIsCompressedFilename",
        "testMatches",
        "testCachingIsEnabledByDefaultAndLZMAIsPresent",
        "testGetUncompressedFilename"
    ],
    "org.apache.commons.compress.compressors.pack200.Pack200UtilsTest": [
        "testNormalizeInPlace",
        "testNormalize"
    ],
    "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStreamTest": [
        "testRemainingChunkTypes",
        "testUnskippableChunk",
        "testAvailable",
        "testLoremIpsum",
        "testMatches",
        "readIWAFile",
        "readIWAFileWithBiggerOffset",
        "testChecksumUnmasking"
    ],
    "org.apache.commons.compress.compressors.snappy.SnappyRoundtripTest": [
        "biggerFileRoundtrip",
        "blaTarRoundtripTunedForCompressionRatio",
        "tryReallyLongLiterals",
        "tryReallyBigOffset",
        "gzippedLoremIpsumRoundtrip",
        "blaTarRoundtrip",
        "blaTarRoundtripTunedForSpeed"
    ],
    "org.apache.commons.compress.compressors.xz.XZCompressorInputStreamTest": [
        "redundantTestOfAlmostDeprecatedMatchesMethod"
    ],
    "org.apache.commons.compress.compressors.xz.XZCompressorOutputStreamTest": [
        "testWrite"
    ],
    "org.apache.commons.compress.compressors.xz.XZUtilsTestCase": [
        "testTurningOnCachingReEvaluatesAvailability",
        "testGetCompressedFilename",
        "testCanTurnOffCaching",
        "testIsCompressedFilename",
        "testMatches",
        "testCachingIsEnabledByDefaultAndXZIsPresent",
        "testGetUncompressedFilename"
    ],
    "org.apache.commons.compress.compressors.z.ZCompressorInputStreamTest": [
        "testFailsToCreateZCompressorInputStreamAndThrowsIOException"
    ],
    "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStreamTest": [
        "testTurningOnCachingReEvaluatesAvailability",
        "testCanTurnOffCaching",
        "singleByteReadWorksAsExpected",
        "singleByteReadReturnsMinusOneAtEof",
        "testZstdDecode",
        "testCachingIsEnabledByDefaultAndZstdUtilsPresent",
        "shouldBeAbleToSkipAByte",
        "testZstandardUnarchive"
    ],
    "org.apache.commons.compress.compressors.zstandard.ZstdRoundtripTest": [
        "directRoundtrip",
        "factoryRoundtrip"
    ],
    "org.apache.commons.compress.compressors.zstandard.ZstdUtilsTest": [
        "testMatchesSkippableFrame",
        "testMatchesZstandardFrame"
    ],
    "org.apache.commons.compress.utils.BitInputStreamTest": [
        "testClearBitCache",
        "testReading30BitsInBigEndian",
        "testEOF",
        "testReading30BitsInLittleEndian",
        "shouldNotAllowReadingOfANegativeAmountOfBits",
        "littleEndianWithOverflow",
        "shouldNotAllowReadingOfMoreThan63BitsAtATime",
        "testReading24BitsInBigEndian",
        "testReading24BitsInLittleEndian",
        "availableWithoutCache",
        "bigEndianWithOverflow",
        "alignWithByteBoundaryWhenNotAtBoundary",
        "testReading17BitsInBigEndian",
        "alignWithByteBoundaryWhenAtBoundary",
        "testReading31BitsInBigEndian",
        "availableWithCache",
        "testReading31BitsInLittleEndian",
        "testReading17BitsInLittleEndian"
    ],
    "org.apache.commons.compress.utils.ByteUtilsTest": [
        "fromLittleEndianFromStreamThrowsForLengthTooBig",
        "toLittleEndianToStreamUnsignedInt32",
        "fromLittleEndianFromStreamUnsignedInt32",
        "fromLittleEndianFromArrayThrowsForLengthTooBig",
        "fromLittleEndianFromArrayOneArgThrowsForLengthTooBig",
        "fromLittleEndianFromStream",
        "fromLittleEndianFromDataInputThrowsForLengthTooBig",
        "fromLittleEndianFromSupplierThrowsForPrematureEnd",
        "fromLittleEndianFromArray",
        "fromLittleEndianFromDataInput",
        "toLittleEndianToByteArrayUnsignedInt32",
        "fromLittleEndianFromArrayUnsignedInt32",
        "toLittleEndianToConsumer",
        "fromLittleEndianFromArrayOneArg",
        "fromLittleEndianFromArrayOneArgUnsignedInt32",
        "toLittleEndianToStream",
        "fromLittleEndianFromSupplier",
        "fromLittleEndianFromStreamThrowsForPrematureEnd",
        "fromLittleEndianFromSupplierUnsignedInt32",
        "toLittleEndianToByteArray",
        "fromLittleEndianFromDataInputUnsignedInt32",
        "fromLittleEndianFromSupplierThrowsForLengthTooBig",
        "toLittleEndianToConsumerUnsignedInt32",
        "fromLittleEndianFromDataInputThrowsForPrematureEnd",
        "toLittleEndianToDataOutput",
        "toLittleEndianToDataOutputUnsignedInt32"
    ],
    "org.apache.commons.compress.utils.CharsetsTest": [
        "testToCharset"
    ],
    "org.apache.commons.compress.utils.ChecksumCalculatingInputStreamTest": [
        "testReadTakingByteArray",
        "testReadTakingNoArguments",
        "testClassInstantiationWithParameterBeingNullThrowsNullPointerExceptionOne",
        "testClassInstantiationWithParameterBeingNullThrowsNullPointerExceptionTwo",
        "testSkipReturningPositive",
        "testClassInstantiationWithParameterBeingNullThrowsNullPointerExceptionThree",
        "testSkipReturningZero"
    ],
    "org.apache.commons.compress.utils.ChecksumVerifyingInputStreamTest": [
        "testReadTakingNoArgumentsThrowsIOException",
        "testSkip",
        "testReadTakingByteArrayThrowsIOException"
    ],
    "org.apache.commons.compress.utils.CountingStreamTest": [
        "output",
        "input"
    ],
    "org.apache.commons.compress.utils.FixedLengthBlockOutputStreamTest": [
        "testWriteBuf",
        "testPartialWritingThrowsException",
        "testWriteFailsAfterFLClosedThrowsException",
        "testSmallWrite",
        "testSmallWriteToStream",
        "testWriteSingleBytes",
        "testWriteFailsAfterDestClosedThrowsException",
        "testMultiWriteBuf",
        "testWithFileOutputStream"
    ],
    "org.apache.commons.compress.utils.IOUtilsTest": [
        "skipUsingRead",
        "skipUsingSkip",
        "readFullyOnChannelThrowsEof",
        "copyThrowsOnZeroBufferSize",
        "readFullyOnChannelReadsFully",
        "skipUsingSkipAndRead"
    ],
    "org.apache.commons.compress.utils.SeekableInMemoryByteChannelTest": [
        "shouldSetProperPosition",
        "shouldSignalEOFWhenPositionAtTheEnd",
        "shouldThrowExceptionWhenSettingPositionOnClosedChannel",
        "shouldThrowExceptionOnWritingToClosedChannel",
        "shouldWriteDataProperlyAfterPositionSet",
        "shouldThrowExceptionOnReadingClosedChannel",
        "shouldReadContentsProperly",
        "shouldThrowExceptionWhenSettingIncorrectPosition",
        "shouldReadContentsWhenBiggerBufferSupplied",
        "shouldWriteDataProperly",
        "shouldSetProperPositionOnTruncate",
        "shouldTruncateContentsProperly",
        "shouldReadDataFromSetPosition"
    ],
    "org.apache.commons.compress.utils.ServiceLoaderIteratorTest": [
        "testRemoveThrowsUnsupportedOperationException",
        "testNextThrowsNoSuchElementException",
        "testHasNextReturnsFalse"
    ],
    "org.apache.commons.compress.utils.SkipShieldingInputStreamTest": [
        "skipSwallowsNegativeArguments",
        "skipHasAnUpperBoundOnRead",
        "skipDelegatesToRead"
    ]
}